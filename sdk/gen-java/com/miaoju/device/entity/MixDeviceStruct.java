/**
 * Autogenerated by Thrift Compiler (0.9.2)-v1.0.1
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * THIS IS MODIFIED FOR ZAN GROUP, ANY PROBLEM PLS CONTACT Zan Group<zan@zanphp.io>
 * @generated
 */
package com.miaoju.device.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)-v1.0.1", date = "2018-4-18")
public class MixDeviceStruct implements org.apache.thrift.TBase<MixDeviceStruct, MixDeviceStruct._Fields>, java.io.Serializable, Cloneable, Comparable<MixDeviceStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MixDeviceStruct");

  private static final org.apache.thrift.protocol.TField DEVICE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TOTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("total", org.apache.thrift.protocol.TType.I16, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MixDeviceStructStandardSchemeFactory());
  }

  private List<com.miaoju.device.entity.DeviceStruct> deviceList; // optional
  private Short total; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEVICE_LIST((short)1, "deviceList"),
    TOTAL((short)2, "total");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEVICE_LIST
          return DEVICE_LIST;
        case 2: // TOTAL
          return TOTAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTAL_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEVICE_LIST,_Fields.TOTAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEVICE_LIST, new org.apache.thrift.meta_data.FieldMetaData("deviceList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.miaoju.device.entity.DeviceStruct.class))));
    tmpMap.put(_Fields.TOTAL, new org.apache.thrift.meta_data.FieldMetaData("total", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MixDeviceStruct.class, metaDataMap);
  }

  public MixDeviceStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MixDeviceStruct(MixDeviceStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDeviceList()) {
      List<com.miaoju.device.entity.DeviceStruct> __this__deviceList = new ArrayList<com.miaoju.device.entity.DeviceStruct>(other.deviceList.size());
      for (com.miaoju.device.entity.DeviceStruct other_element : other.deviceList) {
        __this__deviceList.add(new com.miaoju.device.entity.DeviceStruct(other_element));
      }
      this.deviceList = __this__deviceList;
    }
    this.total = other.total;
  }

  public MixDeviceStruct deepCopy() {
    return new MixDeviceStruct(this);
  }

  @Override
  public void clear() {
    setDeviceListIsSet(false);
    this.deviceList = null;
    setTotalIsSet(false);
    this.total = null;
  }

  public int getDeviceListSize() {
    return (this.deviceList == null) ? 0 : this.deviceList.size();
  }

  public java.util.Iterator<com.miaoju.device.entity.DeviceStruct> getDeviceListIterator() {
    return (this.deviceList == null) ? null : this.deviceList.iterator();
  }

  public void addToDeviceList(com.miaoju.device.entity.DeviceStruct elem) {
    if (this.deviceList == null) {
      this.deviceList = new ArrayList<com.miaoju.device.entity.DeviceStruct>();
    }
    this.deviceList.add(elem);
  }

  public List<com.miaoju.device.entity.DeviceStruct> getDeviceList() {
    return this.deviceList;
  }

  public MixDeviceStruct setDeviceList(List<com.miaoju.device.entity.DeviceStruct> deviceList) {
    this.deviceList = deviceList;
    if (deviceList != null) {
      setDeviceListIsSet(true);
    } else {
      unsetDeviceList();
    }
    return this;
  }

  public void unsetDeviceList() {
    this.deviceList = null;
  }

  /** Returns true if field deviceList is set (has been assigned a value) and false otherwise */
  public boolean isSetDeviceList() {
    return this.deviceList != null;
  }

  public void setDeviceListIsSet(boolean value) {
    if (!value) {
      this.deviceList = null;
    }
  }

  public Short getTotal() {
    return this.total;
  }

  public MixDeviceStruct setTotal(Short total) {
    this.total = total;
    if (total != null) {
      setTotalIsSet(true);
    } else {
      unsetTotal();
    }
    return this;
  }

  public void unsetTotal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  /** Returns true if field total is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_ISSET_ID);
  }

  public void setTotalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEVICE_LIST:
      if (value == null) {
        unsetDeviceList();
      } else {
        setDeviceList((List<com.miaoju.device.entity.DeviceStruct>)value);
      }
      break;

    case TOTAL:
      if (value == null) {
        unsetTotal();
      } else {
        setTotal((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEVICE_LIST:
      if (getDeviceList() != null) {
        return getDeviceList();

      }
      return null;
    case TOTAL:
      if (getTotal() != null) {
        return Short.valueOf(getTotal());
      }
      return null;
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEVICE_LIST:
      return isSetDeviceList();
    case TOTAL:
      return isSetTotal();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MixDeviceStruct)
      return this.equals((MixDeviceStruct)that);
    return false;
  }

  public boolean equals(MixDeviceStruct that) {
    if (that == null)
      return false;

    boolean this_present_deviceList = true && this.isSetDeviceList();
    boolean that_present_deviceList = true && that.isSetDeviceList();
    if (this_present_deviceList || that_present_deviceList) {
      if (!(this_present_deviceList && that_present_deviceList))
        return false;
      if (!this.deviceList.equals(that.deviceList))
        return false;
    }

    boolean this_present_total = true && this.isSetTotal();
    boolean that_present_total = true && that.isSetTotal();
    if (this_present_total || that_present_total) {
      if (!(this_present_total && that_present_total))
        return false;
      if (!this.total.equals(that.total))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_deviceList = true && (isSetDeviceList());
    list.add(present_deviceList);
    if (present_deviceList)
      list.add(deviceList);

    boolean present_total = true && (isSetTotal());
    list.add(present_total);
    if (present_total)
      list.add(total);

    return list.hashCode();
  }

  @Override
  public int compareTo(MixDeviceStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDeviceList()).compareTo(other.isSetDeviceList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeviceList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceList, other.deviceList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal()).compareTo(other.isSetTotal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total, other.total);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MixDeviceStruct(");
    boolean first = true;

    if (isSetDeviceList()) {
      sb.append("deviceList:");
      if (this.deviceList == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceList);
      }
      first = false;
    }
    if (isSetTotal()) {
      if (!first) sb.append(", ");
      sb.append("total:");
      if (this.total == null) {
        sb.append("null");
      } else {
        sb.append(this.total);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  // check for args
  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private static class MixDeviceStructStandardSchemeFactory implements SchemeFactory {
    public MixDeviceStructStandardScheme getScheme() {
      return new MixDeviceStructStandardScheme();
    }
  }

  private static class MixDeviceStructStandardScheme extends StandardScheme<MixDeviceStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MixDeviceStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEVICE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.deviceList = new ArrayList<com.miaoju.device.entity.DeviceStruct>(_list0.size);
                com.miaoju.device.entity.DeviceStruct _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new com.miaoju.device.entity.DeviceStruct();
                  _elem1.read(iprot);
                  struct.deviceList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDeviceListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.total = iprot.readI16();
              struct.setTotalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MixDeviceStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDeviceList()) {
        oprot.writeFieldBegin(DEVICE_LIST_FIELD_DESC);
        {
          int _isize4 = 0;
          for (com.miaoju.device.entity.DeviceStruct _iter3 : struct.deviceList)
          {
            if (_iter3 != null ) 
            {
              _isize4++;
            }
          }
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _isize4));
          for (com.miaoju.device.entity.DeviceStruct _iter3 : struct.deviceList)
          {
            if (_iter3 != null ) {
              _iter3.write(oprot);
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotal()) {
        oprot.writeFieldBegin(TOTAL_FIELD_DESC);
        oprot.writeI16(struct.total);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

