/**
 * Autogenerated by Thrift Compiler (0.9.2)-v1.0.1
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * THIS IS MODIFIED FOR ZAN GROUP, ANY PROBLEM PLS CONTACT Zan Group<zan@zanphp.io>
 * @generated
 */
package com.Miaoju.device.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)-v1.0.1", date = "2018-4-18")
public interface DemoService {

  public Void throwException() throws com.Miaoju.device.exception.DemoServiceException;

  public Void returnVoid();

  public Boolean returnBool();

  public Integer returnI32();

  public Double returnDouble();

  public String returnString();

  public com.Miaoju.device.entity.ErrorLevel returnEnum();

  public com.Miaoju.device.entity.BaseStruct returnBaseStruct();

  public com.Miaoju.device.entity.MixedStruct returnMixedStruct();

  public List<com.Miaoju.device.entity.BaseStruct> returnList();

  public Set<com.Miaoju.device.entity.BaseStruct> returnSet();

  public Map<String,com.Miaoju.device.entity.BaseStruct> returnMap();

  public Void paraBaseNoReturn(String paraString, com.Miaoju.device.entity.ErrorLevel errorLevel);

  public Void paraMixedNoReturn(Boolean paraBool, Integer paraI32, Double paraDouble, String paraString, com.Miaoju.device.entity.BaseStruct baseStruct, List<com.Miaoju.device.entity.BaseStruct> returnList, Set<com.Miaoju.device.entity.BaseStruct> returnSet, Map<String,com.Miaoju.device.entity.BaseStruct> returnMap, com.Miaoju.device.entity.ErrorLevel errorLevel);

  public Map<String,com.Miaoju.device.entity.BaseStruct> complexMethod(Boolean paraBool, Integer paraI32, Double paraDouble, String paraString, com.Miaoju.device.entity.BaseStruct baseStruct, List<com.Miaoju.device.entity.BaseStruct> returnList, Set<com.Miaoju.device.entity.BaseStruct> returnSet, Map<String,com.Miaoju.device.entity.BaseStruct> returnMap, com.Miaoju.device.entity.ErrorLevel errorLevel);

  public static class throwException_args implements org.apache.thrift.TBase<throwException_args, throwException_args._Fields>, java.io.Serializable, Cloneable, Comparable<throwException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("throwException_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new throwException_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(throwException_args.class, metaDataMap);
    }

    public throwException_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public throwException_args(throwException_args other) {
    }

    public throwException_args deepCopy() {
      return new throwException_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof throwException_args)
        return this.equals((throwException_args)that);
      return false;
    }

    public boolean equals(throwException_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(throwException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("throwException_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class throwException_argsStandardSchemeFactory implements SchemeFactory {
      public throwException_argsStandardScheme getScheme() {
        return new throwException_argsStandardScheme();
      }
    }

    private static class throwException_argsStandardScheme extends StandardScheme<throwException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, throwException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, throwException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class throwException_result implements org.apache.thrift.TBase<throwException_result, throwException_result._Fields>, java.io.Serializable, Cloneable, Comparable<throwException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("throwException_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new throwException_resultStandardSchemeFactory());
    }

    private com.Miaoju.device.exception.DemoServiceException e; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(throwException_result.class, metaDataMap);
    }

    public throwException_result() {
    }

    public throwException_result(
      com.Miaoju.device.exception.DemoServiceException e)
    {
      this();
      if (e != null ) {
        this.e = e;
        setEIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public throwException_result(throwException_result other) {
      if (other.isSetE()) {
        this.e = new com.Miaoju.device.exception.DemoServiceException(other.e);
      }
    }

    public throwException_result deepCopy() {
      return new throwException_result(this);
    }

    @Override
    public void clear() {
      setEIsSet(false);
      this.e = null;
    }

    public com.Miaoju.device.exception.DemoServiceException getE() {
      return this.e;
    }

    public throwException_result setE(com.Miaoju.device.exception.DemoServiceException e) {
      this.e = e;
      if (e != null) {
        setEIsSet(true);
      } else {
        unsetE();
      }
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.Miaoju.device.exception.DemoServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        if (getE() != null) {
          return getE();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof throwException_result)
        return this.equals((throwException_result)that);
      return false;
    }

    public boolean equals(throwException_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(throwException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("throwException_result(");
      boolean first = true;

      if (isSetE()) {
        sb.append("e:");
        if (this.e == null) {
          sb.append("null");
        } else {
          sb.append(this.e);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class throwException_resultStandardSchemeFactory implements SchemeFactory {
      public throwException_resultStandardScheme getScheme() {
        return new throwException_resultStandardScheme();
      }
    }

    private static class throwException_resultStandardScheme extends StandardScheme<throwException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, throwException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.Miaoju.device.exception.DemoServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, throwException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetE()) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnVoid_args implements org.apache.thrift.TBase<returnVoid_args, returnVoid_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoid_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnVoid_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoid_args.class, metaDataMap);
    }

    public returnVoid_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnVoid_args(returnVoid_args other) {
    }

    public returnVoid_args deepCopy() {
      return new returnVoid_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnVoid_args)
        return this.equals((returnVoid_args)that);
      return false;
    }

    public boolean equals(returnVoid_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnVoid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnVoid_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnVoid_argsStandardSchemeFactory implements SchemeFactory {
      public returnVoid_argsStandardScheme getScheme() {
        return new returnVoid_argsStandardScheme();
      }
    }

    private static class returnVoid_argsStandardScheme extends StandardScheme<returnVoid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnVoid_result implements org.apache.thrift.TBase<returnVoid_result, returnVoid_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnVoid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnVoid_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnVoid_resultStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnVoid_result.class, metaDataMap);
    }

    public returnVoid_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnVoid_result(returnVoid_result other) {
    }

    public returnVoid_result deepCopy() {
      return new returnVoid_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnVoid_result)
        return this.equals((returnVoid_result)that);
      return false;
    }

    public boolean equals(returnVoid_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnVoid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnVoid_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnVoid_resultStandardSchemeFactory implements SchemeFactory {
      public returnVoid_resultStandardScheme getScheme() {
        return new returnVoid_resultStandardScheme();
      }
    }

    private static class returnVoid_resultStandardScheme extends StandardScheme<returnVoid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnVoid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnVoid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnBool_args implements org.apache.thrift.TBase<returnBool_args, returnBool_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnBool_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnBool_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnBool_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnBool_args.class, metaDataMap);
    }

    public returnBool_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnBool_args(returnBool_args other) {
    }

    public returnBool_args deepCopy() {
      return new returnBool_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnBool_args)
        return this.equals((returnBool_args)that);
      return false;
    }

    public boolean equals(returnBool_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnBool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnBool_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnBool_argsStandardSchemeFactory implements SchemeFactory {
      public returnBool_argsStandardScheme getScheme() {
        return new returnBool_argsStandardScheme();
      }
    }

    private static class returnBool_argsStandardScheme extends StandardScheme<returnBool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnBool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnBool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnBool_result implements org.apache.thrift.TBase<returnBool_result, returnBool_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnBool_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnBool_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnBool_resultStandardSchemeFactory());
    }

    private Boolean success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnBool_result.class, metaDataMap);
    }

    public returnBool_result() {
    }

    public returnBool_result(
      Boolean success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnBool_result(returnBool_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public returnBool_result deepCopy() {
      return new returnBool_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public Boolean isSuccess() {
      return this.success;
    }

    public returnBool_result setSuccess(Boolean success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (isSuccess() != null) {
          return Boolean.valueOf(isSuccess());
        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnBool_result)
        return this.equals((returnBool_result)that);
      return false;
    }

    public boolean equals(returnBool_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnBool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnBool_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnBool_resultStandardSchemeFactory implements SchemeFactory {
      public returnBool_resultStandardScheme getScheme() {
        return new returnBool_resultStandardScheme();
      }
    }

    private static class returnBool_resultStandardScheme extends StandardScheme<returnBool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnBool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnBool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnI32_args implements org.apache.thrift.TBase<returnI32_args, returnI32_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnI32_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnI32_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnI32_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnI32_args.class, metaDataMap);
    }

    public returnI32_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnI32_args(returnI32_args other) {
    }

    public returnI32_args deepCopy() {
      return new returnI32_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnI32_args)
        return this.equals((returnI32_args)that);
      return false;
    }

    public boolean equals(returnI32_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnI32_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnI32_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnI32_argsStandardSchemeFactory implements SchemeFactory {
      public returnI32_argsStandardScheme getScheme() {
        return new returnI32_argsStandardScheme();
      }
    }

    private static class returnI32_argsStandardScheme extends StandardScheme<returnI32_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnI32_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnI32_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnI32_result implements org.apache.thrift.TBase<returnI32_result, returnI32_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnI32_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnI32_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnI32_resultStandardSchemeFactory());
    }

    private Integer success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnI32_result.class, metaDataMap);
    }

    public returnI32_result() {
    }

    public returnI32_result(
      Integer success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnI32_result(returnI32_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public returnI32_result deepCopy() {
      return new returnI32_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public Integer getSuccess() {
      return this.success;
    }

    public returnI32_result setSuccess(Integer success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return Integer.valueOf(getSuccess());
        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnI32_result)
        return this.equals((returnI32_result)that);
      return false;
    }

    public boolean equals(returnI32_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnI32_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnI32_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnI32_resultStandardSchemeFactory implements SchemeFactory {
      public returnI32_resultStandardScheme getScheme() {
        return new returnI32_resultStandardScheme();
      }
    }

    private static class returnI32_resultStandardScheme extends StandardScheme<returnI32_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnI32_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnI32_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnDouble_args implements org.apache.thrift.TBase<returnDouble_args, returnDouble_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnDouble_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnDouble_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnDouble_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnDouble_args.class, metaDataMap);
    }

    public returnDouble_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnDouble_args(returnDouble_args other) {
    }

    public returnDouble_args deepCopy() {
      return new returnDouble_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnDouble_args)
        return this.equals((returnDouble_args)that);
      return false;
    }

    public boolean equals(returnDouble_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnDouble_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnDouble_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnDouble_argsStandardSchemeFactory implements SchemeFactory {
      public returnDouble_argsStandardScheme getScheme() {
        return new returnDouble_argsStandardScheme();
      }
    }

    private static class returnDouble_argsStandardScheme extends StandardScheme<returnDouble_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnDouble_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnDouble_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnDouble_result implements org.apache.thrift.TBase<returnDouble_result, returnDouble_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnDouble_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnDouble_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnDouble_resultStandardSchemeFactory());
    }

    private Double success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnDouble_result.class, metaDataMap);
    }

    public returnDouble_result() {
    }

    public returnDouble_result(
      Double success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnDouble_result(returnDouble_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public returnDouble_result deepCopy() {
      return new returnDouble_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public Double getSuccess() {
      return this.success;
    }

    public returnDouble_result setSuccess(Double success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return Double.valueOf(getSuccess());
        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnDouble_result)
        return this.equals((returnDouble_result)that);
      return false;
    }

    public boolean equals(returnDouble_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnDouble_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnDouble_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnDouble_resultStandardSchemeFactory implements SchemeFactory {
      public returnDouble_resultStandardScheme getScheme() {
        return new returnDouble_resultStandardScheme();
      }
    }

    private static class returnDouble_resultStandardScheme extends StandardScheme<returnDouble_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnDouble_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnDouble_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnString_args implements org.apache.thrift.TBase<returnString_args, returnString_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnString_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnString_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnString_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnString_args.class, metaDataMap);
    }

    public returnString_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnString_args(returnString_args other) {
    }

    public returnString_args deepCopy() {
      return new returnString_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnString_args)
        return this.equals((returnString_args)that);
      return false;
    }

    public boolean equals(returnString_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnString_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnString_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnString_argsStandardSchemeFactory implements SchemeFactory {
      public returnString_argsStandardScheme getScheme() {
        return new returnString_argsStandardScheme();
      }
    }

    private static class returnString_argsStandardScheme extends StandardScheme<returnString_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnString_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnString_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnString_result implements org.apache.thrift.TBase<returnString_result, returnString_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnString_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnString_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnString_resultStandardSchemeFactory());
    }

    private String success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnString_result.class, metaDataMap);
    }

    public returnString_result() {
    }

    public returnString_result(
      String success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnString_result(returnString_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public returnString_result deepCopy() {
      return new returnString_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public returnString_result setSuccess(String success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnString_result)
        return this.equals((returnString_result)that);
      return false;
    }

    public boolean equals(returnString_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnString_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnString_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnString_resultStandardSchemeFactory implements SchemeFactory {
      public returnString_resultStandardScheme getScheme() {
        return new returnString_resultStandardScheme();
      }
    }

    private static class returnString_resultStandardScheme extends StandardScheme<returnString_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnString_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnString_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnEnum_args implements org.apache.thrift.TBase<returnEnum_args, returnEnum_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnEnum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnEnum_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnEnum_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnEnum_args.class, metaDataMap);
    }

    public returnEnum_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnEnum_args(returnEnum_args other) {
    }

    public returnEnum_args deepCopy() {
      return new returnEnum_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnEnum_args)
        return this.equals((returnEnum_args)that);
      return false;
    }

    public boolean equals(returnEnum_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnEnum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnEnum_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnEnum_argsStandardSchemeFactory implements SchemeFactory {
      public returnEnum_argsStandardScheme getScheme() {
        return new returnEnum_argsStandardScheme();
      }
    }

    private static class returnEnum_argsStandardScheme extends StandardScheme<returnEnum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnEnum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnEnum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnEnum_result implements org.apache.thrift.TBase<returnEnum_result, returnEnum_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnEnum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnEnum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnEnum_resultStandardSchemeFactory());
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    private com.Miaoju.device.entity.ErrorLevel success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.Miaoju.device.entity.ErrorLevel
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.Miaoju.device.entity.ErrorLevel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnEnum_result.class, metaDataMap);
    }

    public returnEnum_result() {
    }

    public returnEnum_result(
      com.Miaoju.device.entity.ErrorLevel success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnEnum_result(returnEnum_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public returnEnum_result deepCopy() {
      return new returnEnum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public com.Miaoju.device.entity.ErrorLevel getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public returnEnum_result setSuccess(com.Miaoju.device.entity.ErrorLevel success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.Miaoju.device.entity.ErrorLevel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnEnum_result)
        return this.equals((returnEnum_result)that);
      return false;
    }

    public boolean equals(returnEnum_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(returnEnum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnEnum_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnEnum_resultStandardSchemeFactory implements SchemeFactory {
      public returnEnum_resultStandardScheme getScheme() {
        return new returnEnum_resultStandardScheme();
      }
    }

    private static class returnEnum_resultStandardScheme extends StandardScheme<returnEnum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnEnum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.Miaoju.device.entity.ErrorLevel.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnEnum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnBaseStruct_args implements org.apache.thrift.TBase<returnBaseStruct_args, returnBaseStruct_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnBaseStruct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnBaseStruct_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnBaseStruct_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnBaseStruct_args.class, metaDataMap);
    }

    public returnBaseStruct_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnBaseStruct_args(returnBaseStruct_args other) {
    }

    public returnBaseStruct_args deepCopy() {
      return new returnBaseStruct_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnBaseStruct_args)
        return this.equals((returnBaseStruct_args)that);
      return false;
    }

    public boolean equals(returnBaseStruct_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnBaseStruct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnBaseStruct_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnBaseStruct_argsStandardSchemeFactory implements SchemeFactory {
      public returnBaseStruct_argsStandardScheme getScheme() {
        return new returnBaseStruct_argsStandardScheme();
      }
    }

    private static class returnBaseStruct_argsStandardScheme extends StandardScheme<returnBaseStruct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnBaseStruct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnBaseStruct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnBaseStruct_result implements org.apache.thrift.TBase<returnBaseStruct_result, returnBaseStruct_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnBaseStruct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnBaseStruct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnBaseStruct_resultStandardSchemeFactory());
    }

    private com.Miaoju.device.entity.BaseStruct success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnBaseStruct_result.class, metaDataMap);
    }

    public returnBaseStruct_result() {
    }

    public returnBaseStruct_result(
      com.Miaoju.device.entity.BaseStruct success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnBaseStruct_result(returnBaseStruct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.Miaoju.device.entity.BaseStruct(other.success);
      }
    }

    public returnBaseStruct_result deepCopy() {
      return new returnBaseStruct_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public com.Miaoju.device.entity.BaseStruct getSuccess() {
      return this.success;
    }

    public returnBaseStruct_result setSuccess(com.Miaoju.device.entity.BaseStruct success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.Miaoju.device.entity.BaseStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnBaseStruct_result)
        return this.equals((returnBaseStruct_result)that);
      return false;
    }

    public boolean equals(returnBaseStruct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnBaseStruct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnBaseStruct_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private static class returnBaseStruct_resultStandardSchemeFactory implements SchemeFactory {
      public returnBaseStruct_resultStandardScheme getScheme() {
        return new returnBaseStruct_resultStandardScheme();
      }
    }

    private static class returnBaseStruct_resultStandardScheme extends StandardScheme<returnBaseStruct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnBaseStruct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.Miaoju.device.entity.BaseStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnBaseStruct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnMixedStruct_args implements org.apache.thrift.TBase<returnMixedStruct_args, returnMixedStruct_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnMixedStruct_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMixedStruct_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMixedStruct_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMixedStruct_args.class, metaDataMap);
    }

    public returnMixedStruct_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMixedStruct_args(returnMixedStruct_args other) {
    }

    public returnMixedStruct_args deepCopy() {
      return new returnMixedStruct_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMixedStruct_args)
        return this.equals((returnMixedStruct_args)that);
      return false;
    }

    public boolean equals(returnMixedStruct_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMixedStruct_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMixedStruct_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnMixedStruct_argsStandardSchemeFactory implements SchemeFactory {
      public returnMixedStruct_argsStandardScheme getScheme() {
        return new returnMixedStruct_argsStandardScheme();
      }
    }

    private static class returnMixedStruct_argsStandardScheme extends StandardScheme<returnMixedStruct_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMixedStruct_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMixedStruct_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnMixedStruct_result implements org.apache.thrift.TBase<returnMixedStruct_result, returnMixedStruct_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnMixedStruct_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMixedStruct_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMixedStruct_resultStandardSchemeFactory());
    }

    private com.Miaoju.device.entity.MixedStruct success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.MixedStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMixedStruct_result.class, metaDataMap);
    }

    public returnMixedStruct_result() {
    }

    public returnMixedStruct_result(
      com.Miaoju.device.entity.MixedStruct success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMixedStruct_result(returnMixedStruct_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.Miaoju.device.entity.MixedStruct(other.success);
      }
    }

    public returnMixedStruct_result deepCopy() {
      return new returnMixedStruct_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public com.Miaoju.device.entity.MixedStruct getSuccess() {
      return this.success;
    }

    public returnMixedStruct_result setSuccess(com.Miaoju.device.entity.MixedStruct success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.Miaoju.device.entity.MixedStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMixedStruct_result)
        return this.equals((returnMixedStruct_result)that);
      return false;
    }

    public boolean equals(returnMixedStruct_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMixedStruct_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMixedStruct_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private static class returnMixedStruct_resultStandardSchemeFactory implements SchemeFactory {
      public returnMixedStruct_resultStandardScheme getScheme() {
        return new returnMixedStruct_resultStandardScheme();
      }
    }

    private static class returnMixedStruct_resultStandardScheme extends StandardScheme<returnMixedStruct_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMixedStruct_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.Miaoju.device.entity.MixedStruct();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMixedStruct_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnList_args implements org.apache.thrift.TBase<returnList_args, returnList_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnList_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnList_args.class, metaDataMap);
    }

    public returnList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnList_args(returnList_args other) {
    }

    public returnList_args deepCopy() {
      return new returnList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnList_args)
        return this.equals((returnList_args)that);
      return false;
    }

    public boolean equals(returnList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnList_argsStandardSchemeFactory implements SchemeFactory {
      public returnList_argsStandardScheme getScheme() {
        return new returnList_argsStandardScheme();
      }
    }

    private static class returnList_argsStandardScheme extends StandardScheme<returnList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnList_result implements org.apache.thrift.TBase<returnList_result, returnList_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnList_resultStandardSchemeFactory());
    }

    private List<com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnList_result.class, metaDataMap);
    }

    public returnList_result() {
    }

    public returnList_result(
      List<com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnList_result(returnList_result other) {
      if (other.isSetSuccess()) {
        List<com.Miaoju.device.entity.BaseStruct> __this__success = new ArrayList<com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.success) {
          __this__success.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.success = __this__success;
      }
    }

    public returnList_result deepCopy() {
      return new returnList_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.add(elem);
    }

    public List<com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public returnList_result setSuccess(List<com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnList_result)
        return this.equals((returnList_result)that);
      return false;
    }

    public boolean equals(returnList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnList_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnList_resultStandardSchemeFactory implements SchemeFactory {
      public returnList_resultStandardScheme getScheme() {
        return new returnList_resultStandardScheme();
      }
    }

    private static class returnList_resultStandardScheme extends StandardScheme<returnList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<com.Miaoju.device.entity.BaseStruct>(_list0.size);
                  com.Miaoju.device.entity.BaseStruct _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.Miaoju.device.entity.BaseStruct();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize4 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter3 : struct.success)
            {
              if (_iter3 != null ) 
              {
                _isize4++;
              }
            }
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _isize4));
            for (com.Miaoju.device.entity.BaseStruct _iter3 : struct.success)
            {
              if (_iter3 != null ) {
                _iter3.write(oprot);
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnSet_args implements org.apache.thrift.TBase<returnSet_args, returnSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnSet_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnSet_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnSet_args.class, metaDataMap);
    }

    public returnSet_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnSet_args(returnSet_args other) {
    }

    public returnSet_args deepCopy() {
      return new returnSet_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnSet_args)
        return this.equals((returnSet_args)that);
      return false;
    }

    public boolean equals(returnSet_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnSet_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnSet_argsStandardSchemeFactory implements SchemeFactory {
      public returnSet_argsStandardScheme getScheme() {
        return new returnSet_argsStandardScheme();
      }
    }

    private static class returnSet_argsStandardScheme extends StandardScheme<returnSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnSet_result implements org.apache.thrift.TBase<returnSet_result, returnSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnSet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.SET, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnSet_resultStandardSchemeFactory());
    }

    private Set<com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnSet_result.class, metaDataMap);
    }

    public returnSet_result() {
    }

    public returnSet_result(
      Set<com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnSet_result(returnSet_result other) {
      if (other.isSetSuccess()) {
        Set<com.Miaoju.device.entity.BaseStruct> __this__success = new HashSet<com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.success) {
          __this__success.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.success = __this__success;
      }
    }

    public returnSet_result deepCopy() {
      return new returnSet_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.success == null) {
        this.success = new HashSet<com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.add(elem);
    }

    public Set<com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public returnSet_result setSuccess(Set<com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Set<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnSet_result)
        return this.equals((returnSet_result)that);
      return false;
    }

    public boolean equals(returnSet_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnSet_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnSet_resultStandardSchemeFactory implements SchemeFactory {
      public returnSet_resultStandardScheme getScheme() {
        return new returnSet_resultStandardScheme();
      }
    }

    private static class returnSet_resultStandardScheme extends StandardScheme<returnSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set5 = iprot.readSetBegin();
                  struct.success = new HashSet<com.Miaoju.device.entity.BaseStruct>(2*_set5.size);
                  com.Miaoju.device.entity.BaseStruct _elem6;
                  for (int _i7 = 0; _i7 < _set5.size; ++_i7)
                  {
                    _elem6 = new com.Miaoju.device.entity.BaseStruct();
                    _elem6.read(iprot);
                    struct.success.add(_elem6);
                  }
                  iprot.readSetEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize9 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter8 : struct.success)
            {
              if (_iter8 != null ) 
              {
                _isize9++;
              }
            }
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _isize9));
            for (com.Miaoju.device.entity.BaseStruct _iter8 : struct.success)
            {
              if (_iter8 != null ) {
            _iter8.write(oprot);
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnMap_args implements org.apache.thrift.TBase<returnMap_args, returnMap_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnMap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMap_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMap_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMap_args.class, metaDataMap);
    }

    public returnMap_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMap_args(returnMap_args other) {
    }

    public returnMap_args deepCopy() {
      return new returnMap_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMap_args)
        return this.equals((returnMap_args)that);
      return false;
    }

    public boolean equals(returnMap_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMap_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class returnMap_argsStandardSchemeFactory implements SchemeFactory {
      public returnMap_argsStandardScheme getScheme() {
        return new returnMap_argsStandardScheme();
      }
    }

    private static class returnMap_argsStandardScheme extends StandardScheme<returnMap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class returnMap_result implements org.apache.thrift.TBase<returnMap_result, returnMap_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnMap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnMap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new returnMap_resultStandardSchemeFactory());
    }

    private Map<String,com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnMap_result.class, metaDataMap);
    }

    public returnMap_result() {
    }

    public returnMap_result(
      Map<String,com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnMap_result(returnMap_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__success_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public returnMap_result deepCopy() {
      return new returnMap_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public returnMap_result setSuccess(Map<String,com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof returnMap_result)
        return this.equals((returnMap_result)that);
      return false;
    }

    public boolean equals(returnMap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(returnMap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("returnMap_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class returnMap_resultStandardSchemeFactory implements SchemeFactory {
      public returnMap_resultStandardScheme getScheme() {
        return new returnMap_resultStandardScheme();
      }
    }

    private static class returnMap_resultStandardScheme extends StandardScheme<returnMap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnMap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map10.size);
                  String _key11;
                  com.Miaoju.device.entity.BaseStruct _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = new com.Miaoju.device.entity.BaseStruct();
                    _val12.read(iprot);
                    struct.success.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnMap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize15 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter14 : struct.success.entrySet())

            {
              if (_iter14 != null &&_iter14.getValue() != null ) 
              {
                _isize15++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize15));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter14 : struct.success.entrySet())
            {
              if (_iter14 != null && _iter14.getValue() != null) {
            oprot.writeString(_iter14.getKey());
            _iter14.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class paraBaseNoReturn_args implements org.apache.thrift.TBase<paraBaseNoReturn_args, paraBaseNoReturn_args._Fields>, java.io.Serializable, Cloneable, Comparable<paraBaseNoReturn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paraBaseNoReturn_args");

    private static final org.apache.thrift.protocol.TField PARA_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("paraString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ERROR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLevel", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paraBaseNoReturn_argsStandardSchemeFactory());
    }

    private String paraString; // default
    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    private com.Miaoju.device.entity.ErrorLevel errorLevel; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_STRING((short)1, "paraString"),
      /**
       * 
       * @see com.Miaoju.device.entity.ErrorLevel
       */
      ERROR_LEVEL((short)2, "errorLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_STRING
            return PARA_STRING;
          case 2: // ERROR_LEVEL
            return ERROR_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_STRING, new org.apache.thrift.meta_data.FieldMetaData("paraString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("errorLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.Miaoju.device.entity.ErrorLevel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paraBaseNoReturn_args.class, metaDataMap);
    }

    public paraBaseNoReturn_args() {
    }

    public paraBaseNoReturn_args(
      String paraString,
      com.Miaoju.device.entity.ErrorLevel errorLevel)
    {
      this();
      if (paraString != null ) {
        this.paraString = paraString;
        setParaStringIsSet(true);
      } else {
        setParaStringIsSet(false);
      }
      if (errorLevel != null ) {
        this.errorLevel = errorLevel;
        setErrorLevelIsSet(true);
      } else {
        setErrorLevelIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paraBaseNoReturn_args(paraBaseNoReturn_args other) {
      if (other.isSetParaString()) {
        this.paraString = other.paraString;
      }
      if (other.isSetErrorLevel()) {
        this.errorLevel = other.errorLevel;
      }
    }

    public paraBaseNoReturn_args deepCopy() {
      return new paraBaseNoReturn_args(this);
    }

    @Override
    public void clear() {
      setParaStringIsSet(false);
      this.paraString = null;
      setErrorLevelIsSet(false);
      this.errorLevel = null;
    }

    public String getParaString() {
      return this.paraString;
    }

    public paraBaseNoReturn_args setParaString(String paraString) {
      this.paraString = paraString;
      if (paraString != null) {
        setParaStringIsSet(true);
      } else {
        unsetParaString();
      }
      return this;
    }

    public void unsetParaString() {
      this.paraString = null;
    }

    /** Returns true if field paraString is set (has been assigned a value) and false otherwise */
    public boolean isSetParaString() {
      return this.paraString != null;
    }

    public void setParaStringIsSet(boolean value) {
      if (!value) {
        this.paraString = null;
      }
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public com.Miaoju.device.entity.ErrorLevel getErrorLevel() {
      return this.errorLevel;
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public paraBaseNoReturn_args setErrorLevel(com.Miaoju.device.entity.ErrorLevel errorLevel) {
      this.errorLevel = errorLevel;
      if (errorLevel != null) {
        setErrorLevelIsSet(true);
      } else {
        unsetErrorLevel();
      }
      return this;
    }

    public void unsetErrorLevel() {
      this.errorLevel = null;
    }

    /** Returns true if field errorLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorLevel() {
      return this.errorLevel != null;
    }

    public void setErrorLevelIsSet(boolean value) {
      if (!value) {
        this.errorLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_STRING:
        if (value == null) {
          unsetParaString();
        } else {
          setParaString((String)value);
        }
        break;

      case ERROR_LEVEL:
        if (value == null) {
          unsetErrorLevel();
        } else {
          setErrorLevel((com.Miaoju.device.entity.ErrorLevel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_STRING:
        if (getParaString() != null) {
          return getParaString();

        }
        return null;
      case ERROR_LEVEL:
        if (getErrorLevel() != null) {
          return getErrorLevel();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_STRING:
        return isSetParaString();
      case ERROR_LEVEL:
        return isSetErrorLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paraBaseNoReturn_args)
        return this.equals((paraBaseNoReturn_args)that);
      return false;
    }

    public boolean equals(paraBaseNoReturn_args that) {
      if (that == null)
        return false;

      boolean this_present_paraString = true && this.isSetParaString();
      boolean that_present_paraString = true && that.isSetParaString();
      if (this_present_paraString || that_present_paraString) {
        if (!(this_present_paraString && that_present_paraString))
          return false;
        if (!this.paraString.equals(that.paraString))
          return false;
      }

      boolean this_present_errorLevel = true && this.isSetErrorLevel();
      boolean that_present_errorLevel = true && that.isSetErrorLevel();
      if (this_present_errorLevel || that_present_errorLevel) {
        if (!(this_present_errorLevel && that_present_errorLevel))
          return false;
        if (!this.errorLevel.equals(that.errorLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paraString = true && (isSetParaString());
      list.add(present_paraString);
      if (present_paraString)
        list.add(paraString);

      boolean present_errorLevel = true && (isSetErrorLevel());
      list.add(present_errorLevel);
      if (present_errorLevel)
        list.add(errorLevel.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(paraBaseNoReturn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaString()).compareTo(other.isSetParaString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraString, other.paraString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrorLevel()).compareTo(other.isSetErrorLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLevel, other.errorLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paraBaseNoReturn_args(");
      boolean first = true;

      if (isSetParaString()) {
        sb.append("paraString:");
        if (this.paraString == null) {
          sb.append("null");
        } else {
          sb.append(this.paraString);
        }
        first = false;
      }
      if (isSetErrorLevel()) {
        if (!first) sb.append(", ");
        sb.append("errorLevel:");
        if (this.errorLevel == null) {
          sb.append("null");
        } else {
          sb.append(this.errorLevel);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (paraString == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraString' is unset! Struct:" + toString());
      }

      if (errorLevel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorLevel' is unset! Struct:" + toString());
      }

    }

    private static class paraBaseNoReturn_argsStandardSchemeFactory implements SchemeFactory {
      public paraBaseNoReturn_argsStandardScheme getScheme() {
        return new paraBaseNoReturn_argsStandardScheme();
      }
    }

    private static class paraBaseNoReturn_argsStandardScheme extends StandardScheme<paraBaseNoReturn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paraBaseNoReturn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paraString = iprot.readString();
                struct.setParaStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ERROR_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorLevel = com.Miaoju.device.entity.ErrorLevel.findByValue(iprot.readI32());
                struct.setErrorLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paraBaseNoReturn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetParaString()) {
          oprot.writeFieldBegin(PARA_STRING_FIELD_DESC);
          oprot.writeString(struct.paraString);
          oprot.writeFieldEnd();
        }
        if (struct.isSetErrorLevel()) {
          oprot.writeFieldBegin(ERROR_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.errorLevel.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class paraBaseNoReturn_result implements org.apache.thrift.TBase<paraBaseNoReturn_result, paraBaseNoReturn_result._Fields>, java.io.Serializable, Cloneable, Comparable<paraBaseNoReturn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paraBaseNoReturn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paraBaseNoReturn_resultStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paraBaseNoReturn_result.class, metaDataMap);
    }

    public paraBaseNoReturn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paraBaseNoReturn_result(paraBaseNoReturn_result other) {
    }

    public paraBaseNoReturn_result deepCopy() {
      return new paraBaseNoReturn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paraBaseNoReturn_result)
        return this.equals((paraBaseNoReturn_result)that);
      return false;
    }

    public boolean equals(paraBaseNoReturn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(paraBaseNoReturn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paraBaseNoReturn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class paraBaseNoReturn_resultStandardSchemeFactory implements SchemeFactory {
      public paraBaseNoReturn_resultStandardScheme getScheme() {
        return new paraBaseNoReturn_resultStandardScheme();
      }
    }

    private static class paraBaseNoReturn_resultStandardScheme extends StandardScheme<paraBaseNoReturn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paraBaseNoReturn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paraBaseNoReturn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class paraMixedNoReturn_args implements org.apache.thrift.TBase<paraMixedNoReturn_args, paraMixedNoReturn_args._Fields>, java.io.Serializable, Cloneable, Comparable<paraMixedNoReturn_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paraMixedNoReturn_args");

    private static final org.apache.thrift.protocol.TField PARA_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("paraBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField PARA_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("paraI32", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARA_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("paraDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField PARA_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("paraString", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BASE_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("baseStruct", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField RETURN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("returnList", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField RETURN_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("returnSet", org.apache.thrift.protocol.TType.SET, (short)7);
    private static final org.apache.thrift.protocol.TField RETURN_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMap", org.apache.thrift.protocol.TType.MAP, (short)8);
    private static final org.apache.thrift.protocol.TField ERROR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLevel", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paraMixedNoReturn_argsStandardSchemeFactory());
    }

    private Boolean paraBool; // default
    private Integer paraI32; // default
    private Double paraDouble; // default
    private String paraString; // default
    private com.Miaoju.device.entity.BaseStruct baseStruct; // default
    private List<com.Miaoju.device.entity.BaseStruct> returnList; // default
    private Set<com.Miaoju.device.entity.BaseStruct> returnSet; // default
    private Map<String,com.Miaoju.device.entity.BaseStruct> returnMap; // default
    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    private com.Miaoju.device.entity.ErrorLevel errorLevel; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_BOOL((short)1, "paraBool"),
      PARA_I32((short)2, "paraI32"),
      PARA_DOUBLE((short)3, "paraDouble"),
      PARA_STRING((short)4, "paraString"),
      BASE_STRUCT((short)5, "baseStruct"),
      RETURN_LIST((short)6, "returnList"),
      RETURN_SET((short)7, "returnSet"),
      RETURN_MAP((short)8, "returnMap"),
      /**
       * 
       * @see com.Miaoju.device.entity.ErrorLevel
       */
      ERROR_LEVEL((short)9, "errorLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_BOOL
            return PARA_BOOL;
          case 2: // PARA_I32
            return PARA_I32;
          case 3: // PARA_DOUBLE
            return PARA_DOUBLE;
          case 4: // PARA_STRING
            return PARA_STRING;
          case 5: // BASE_STRUCT
            return BASE_STRUCT;
          case 6: // RETURN_LIST
            return RETURN_LIST;
          case 7: // RETURN_SET
            return RETURN_SET;
          case 8: // RETURN_MAP
            return RETURN_MAP;
          case 9: // ERROR_LEVEL
            return ERROR_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARABOOL_ISSET_ID = 0;
    private static final int __PARAI32_ISSET_ID = 1;
    private static final int __PARADOUBLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_BOOL, new org.apache.thrift.meta_data.FieldMetaData("paraBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PARA_I32, new org.apache.thrift.meta_data.FieldMetaData("paraI32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARA_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("paraDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PARA_STRING, new org.apache.thrift.meta_data.FieldMetaData("paraString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BASE_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("baseStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class)));
      tmpMap.put(_Fields.RETURN_LIST, new org.apache.thrift.meta_data.FieldMetaData("returnList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.RETURN_SET, new org.apache.thrift.meta_data.FieldMetaData("returnSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.RETURN_MAP, new org.apache.thrift.meta_data.FieldMetaData("returnMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.ERROR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("errorLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.Miaoju.device.entity.ErrorLevel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paraMixedNoReturn_args.class, metaDataMap);
    }

    public paraMixedNoReturn_args() {
    }

    public paraMixedNoReturn_args(
      Boolean paraBool,
      Integer paraI32,
      Double paraDouble,
      String paraString,
      com.Miaoju.device.entity.BaseStruct baseStruct,
      List<com.Miaoju.device.entity.BaseStruct> returnList,
      Set<com.Miaoju.device.entity.BaseStruct> returnSet,
      Map<String,com.Miaoju.device.entity.BaseStruct> returnMap,
      com.Miaoju.device.entity.ErrorLevel errorLevel)
    {
      this();
      if (paraBool != null ) {
        this.paraBool = paraBool;
        setParaBoolIsSet(true);
      } else {
        setParaBoolIsSet(false);
      }
      if (paraI32 != null ) {
        this.paraI32 = paraI32;
        setParaI32IsSet(true);
      } else {
        setParaI32IsSet(false);
      }
      if (paraDouble != null ) {
        this.paraDouble = paraDouble;
        setParaDoubleIsSet(true);
      } else {
        setParaDoubleIsSet(false);
      }
      if (paraString != null ) {
        this.paraString = paraString;
        setParaStringIsSet(true);
      } else {
        setParaStringIsSet(false);
      }
      if (baseStruct != null ) {
        this.baseStruct = baseStruct;
        setBaseStructIsSet(true);
      } else {
        setBaseStructIsSet(false);
      }
      if (returnList != null ) {
        this.returnList = returnList;
        setReturnListIsSet(true);
      } else {
        setReturnListIsSet(false);
      }
      if (returnSet != null ) {
        this.returnSet = returnSet;
        setReturnSetIsSet(true);
      } else {
        setReturnSetIsSet(false);
      }
      if (returnMap != null ) {
        this.returnMap = returnMap;
        setReturnMapIsSet(true);
      } else {
        setReturnMapIsSet(false);
      }
      if (errorLevel != null ) {
        this.errorLevel = errorLevel;
        setErrorLevelIsSet(true);
      } else {
        setErrorLevelIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paraMixedNoReturn_args(paraMixedNoReturn_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.paraBool = other.paraBool;
      this.paraI32 = other.paraI32;
      this.paraDouble = other.paraDouble;
      if (other.isSetParaString()) {
        this.paraString = other.paraString;
      }
      if (other.isSetBaseStruct()) {
        this.baseStruct = new com.Miaoju.device.entity.BaseStruct(other.baseStruct);
      }
      if (other.isSetReturnList()) {
        List<com.Miaoju.device.entity.BaseStruct> __this__returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>(other.returnList.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.returnList) {
          __this__returnList.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.returnList = __this__returnList;
      }
      if (other.isSetReturnSet()) {
        Set<com.Miaoju.device.entity.BaseStruct> __this__returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>(other.returnSet.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.returnSet) {
          __this__returnSet.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.returnSet = __this__returnSet;
      }
      if (other.isSetReturnMap()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.returnMap.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.returnMap.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__returnMap_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__returnMap_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__returnMap.put(__this__returnMap_copy_key, __this__returnMap_copy_value);
        }
        this.returnMap = __this__returnMap;
      }
      if (other.isSetErrorLevel()) {
        this.errorLevel = other.errorLevel;
      }
    }

    public paraMixedNoReturn_args deepCopy() {
      return new paraMixedNoReturn_args(this);
    }

    @Override
    public void clear() {
      setParaBoolIsSet(false);
      this.paraBool = null;
      setParaI32IsSet(false);
      this.paraI32 = null;
      setParaDoubleIsSet(false);
      this.paraDouble = null;
      setParaStringIsSet(false);
      this.paraString = null;
      setBaseStructIsSet(false);
      this.baseStruct = null;
      setReturnListIsSet(false);
      this.returnList = null;
      setReturnSetIsSet(false);
      this.returnSet = null;
      setReturnMapIsSet(false);
      this.returnMap = null;
      setErrorLevelIsSet(false);
      this.errorLevel = null;
    }

    public Boolean isParaBool() {
      return this.paraBool;
    }

    public paraMixedNoReturn_args setParaBool(Boolean paraBool) {
      this.paraBool = paraBool;
      if (paraBool != null) {
        setParaBoolIsSet(true);
      } else {
        unsetParaBool();
      }
      return this;
    }

    public void unsetParaBool() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARABOOL_ISSET_ID);
    }

    /** Returns true if field paraBool is set (has been assigned a value) and false otherwise */
    public boolean isSetParaBool() {
      return EncodingUtils.testBit(__isset_bitfield, __PARABOOL_ISSET_ID);
    }

    public void setParaBoolIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARABOOL_ISSET_ID, value);
    }

    public Integer getParaI32() {
      return this.paraI32;
    }

    public paraMixedNoReturn_args setParaI32(Integer paraI32) {
      this.paraI32 = paraI32;
      if (paraI32 != null) {
        setParaI32IsSet(true);
      } else {
        unsetParaI32();
      }
      return this;
    }

    public void unsetParaI32() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAI32_ISSET_ID);
    }

    /** Returns true if field paraI32 is set (has been assigned a value) and false otherwise */
    public boolean isSetParaI32() {
      return EncodingUtils.testBit(__isset_bitfield, __PARAI32_ISSET_ID);
    }

    public void setParaI32IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAI32_ISSET_ID, value);
    }

    public Double getParaDouble() {
      return this.paraDouble;
    }

    public paraMixedNoReturn_args setParaDouble(Double paraDouble) {
      this.paraDouble = paraDouble;
      if (paraDouble != null) {
        setParaDoubleIsSet(true);
      } else {
        unsetParaDouble();
      }
      return this;
    }

    public void unsetParaDouble() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARADOUBLE_ISSET_ID);
    }

    /** Returns true if field paraDouble is set (has been assigned a value) and false otherwise */
    public boolean isSetParaDouble() {
      return EncodingUtils.testBit(__isset_bitfield, __PARADOUBLE_ISSET_ID);
    }

    public void setParaDoubleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARADOUBLE_ISSET_ID, value);
    }

    public String getParaString() {
      return this.paraString;
    }

    public paraMixedNoReturn_args setParaString(String paraString) {
      this.paraString = paraString;
      if (paraString != null) {
        setParaStringIsSet(true);
      } else {
        unsetParaString();
      }
      return this;
    }

    public void unsetParaString() {
      this.paraString = null;
    }

    /** Returns true if field paraString is set (has been assigned a value) and false otherwise */
    public boolean isSetParaString() {
      return this.paraString != null;
    }

    public void setParaStringIsSet(boolean value) {
      if (!value) {
        this.paraString = null;
      }
    }

    public com.Miaoju.device.entity.BaseStruct getBaseStruct() {
      return this.baseStruct;
    }

    public paraMixedNoReturn_args setBaseStruct(com.Miaoju.device.entity.BaseStruct baseStruct) {
      this.baseStruct = baseStruct;
      if (baseStruct != null) {
        setBaseStructIsSet(true);
      } else {
        unsetBaseStruct();
      }
      return this;
    }

    public void unsetBaseStruct() {
      this.baseStruct = null;
    }

    /** Returns true if field baseStruct is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseStruct() {
      return this.baseStruct != null;
    }

    public void setBaseStructIsSet(boolean value) {
      if (!value) {
        this.baseStruct = null;
      }
    }

    public int getReturnListSize() {
      return (this.returnList == null) ? 0 : this.returnList.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getReturnListIterator() {
      return (this.returnList == null) ? null : this.returnList.iterator();
    }

    public void addToReturnList(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.returnList == null) {
        this.returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnList.add(elem);
    }

    public List<com.Miaoju.device.entity.BaseStruct> getReturnList() {
      return this.returnList;
    }

    public paraMixedNoReturn_args setReturnList(List<com.Miaoju.device.entity.BaseStruct> returnList) {
      this.returnList = returnList;
      if (returnList != null) {
        setReturnListIsSet(true);
      } else {
        unsetReturnList();
      }
      return this;
    }

    public void unsetReturnList() {
      this.returnList = null;
    }

    /** Returns true if field returnList is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnList() {
      return this.returnList != null;
    }

    public void setReturnListIsSet(boolean value) {
      if (!value) {
        this.returnList = null;
      }
    }

    public int getReturnSetSize() {
      return (this.returnSet == null) ? 0 : this.returnSet.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getReturnSetIterator() {
      return (this.returnSet == null) ? null : this.returnSet.iterator();
    }

    public void addToReturnSet(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.returnSet == null) {
        this.returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnSet.add(elem);
    }

    public Set<com.Miaoju.device.entity.BaseStruct> getReturnSet() {
      return this.returnSet;
    }

    public paraMixedNoReturn_args setReturnSet(Set<com.Miaoju.device.entity.BaseStruct> returnSet) {
      this.returnSet = returnSet;
      if (returnSet != null) {
        setReturnSetIsSet(true);
      } else {
        unsetReturnSet();
      }
      return this;
    }

    public void unsetReturnSet() {
      this.returnSet = null;
    }

    /** Returns true if field returnSet is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnSet() {
      return this.returnSet != null;
    }

    public void setReturnSetIsSet(boolean value) {
      if (!value) {
        this.returnSet = null;
      }
    }

    public int getReturnMapSize() {
      return (this.returnMap == null) ? 0 : this.returnMap.size();
    }

    public void putToReturnMap(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.returnMap == null) {
        this.returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnMap.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getReturnMap() {
      return this.returnMap;
    }

    public paraMixedNoReturn_args setReturnMap(Map<String,com.Miaoju.device.entity.BaseStruct> returnMap) {
      this.returnMap = returnMap;
      if (returnMap != null) {
        setReturnMapIsSet(true);
      } else {
        unsetReturnMap();
      }
      return this;
    }

    public void unsetReturnMap() {
      this.returnMap = null;
    }

    /** Returns true if field returnMap is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnMap() {
      return this.returnMap != null;
    }

    public void setReturnMapIsSet(boolean value) {
      if (!value) {
        this.returnMap = null;
      }
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public com.Miaoju.device.entity.ErrorLevel getErrorLevel() {
      return this.errorLevel;
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public paraMixedNoReturn_args setErrorLevel(com.Miaoju.device.entity.ErrorLevel errorLevel) {
      this.errorLevel = errorLevel;
      if (errorLevel != null) {
        setErrorLevelIsSet(true);
      } else {
        unsetErrorLevel();
      }
      return this;
    }

    public void unsetErrorLevel() {
      this.errorLevel = null;
    }

    /** Returns true if field errorLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorLevel() {
      return this.errorLevel != null;
    }

    public void setErrorLevelIsSet(boolean value) {
      if (!value) {
        this.errorLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_BOOL:
        if (value == null) {
          unsetParaBool();
        } else {
          setParaBool((Boolean)value);
        }
        break;

      case PARA_I32:
        if (value == null) {
          unsetParaI32();
        } else {
          setParaI32((Integer)value);
        }
        break;

      case PARA_DOUBLE:
        if (value == null) {
          unsetParaDouble();
        } else {
          setParaDouble((Double)value);
        }
        break;

      case PARA_STRING:
        if (value == null) {
          unsetParaString();
        } else {
          setParaString((String)value);
        }
        break;

      case BASE_STRUCT:
        if (value == null) {
          unsetBaseStruct();
        } else {
          setBaseStruct((com.Miaoju.device.entity.BaseStruct)value);
        }
        break;

      case RETURN_LIST:
        if (value == null) {
          unsetReturnList();
        } else {
          setReturnList((List<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case RETURN_SET:
        if (value == null) {
          unsetReturnSet();
        } else {
          setReturnSet((Set<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case RETURN_MAP:
        if (value == null) {
          unsetReturnMap();
        } else {
          setReturnMap((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case ERROR_LEVEL:
        if (value == null) {
          unsetErrorLevel();
        } else {
          setErrorLevel((com.Miaoju.device.entity.ErrorLevel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_BOOL:
        if (isParaBool() != null) {
          return Boolean.valueOf(isParaBool());
        }
        return null;
      case PARA_I32:
        if (getParaI32() != null) {
          return Integer.valueOf(getParaI32());
        }
        return null;
      case PARA_DOUBLE:
        if (getParaDouble() != null) {
          return Double.valueOf(getParaDouble());
        }
        return null;
      case PARA_STRING:
        if (getParaString() != null) {
          return getParaString();

        }
        return null;
      case BASE_STRUCT:
        if (getBaseStruct() != null) {
          return getBaseStruct();

        }
        return null;
      case RETURN_LIST:
        if (getReturnList() != null) {
          return getReturnList();

        }
        return null;
      case RETURN_SET:
        if (getReturnSet() != null) {
          return getReturnSet();

        }
        return null;
      case RETURN_MAP:
        if (getReturnMap() != null) {
          return getReturnMap();

        }
        return null;
      case ERROR_LEVEL:
        if (getErrorLevel() != null) {
          return getErrorLevel();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_BOOL:
        return isSetParaBool();
      case PARA_I32:
        return isSetParaI32();
      case PARA_DOUBLE:
        return isSetParaDouble();
      case PARA_STRING:
        return isSetParaString();
      case BASE_STRUCT:
        return isSetBaseStruct();
      case RETURN_LIST:
        return isSetReturnList();
      case RETURN_SET:
        return isSetReturnSet();
      case RETURN_MAP:
        return isSetReturnMap();
      case ERROR_LEVEL:
        return isSetErrorLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paraMixedNoReturn_args)
        return this.equals((paraMixedNoReturn_args)that);
      return false;
    }

    public boolean equals(paraMixedNoReturn_args that) {
      if (that == null)
        return false;

      boolean this_present_paraBool = true && this.isSetParaBool();
      boolean that_present_paraBool = true && that.isSetParaBool();
      if (this_present_paraBool || that_present_paraBool) {
        if (!(this_present_paraBool && that_present_paraBool))
          return false;
        if (!this.paraBool.equals(that.paraBool))
          return false;
      }

      boolean this_present_paraI32 = true && this.isSetParaI32();
      boolean that_present_paraI32 = true && that.isSetParaI32();
      if (this_present_paraI32 || that_present_paraI32) {
        if (!(this_present_paraI32 && that_present_paraI32))
          return false;
        if (!this.paraI32.equals(that.paraI32))
          return false;
      }

      boolean this_present_paraDouble = true && this.isSetParaDouble();
      boolean that_present_paraDouble = true && that.isSetParaDouble();
      if (this_present_paraDouble || that_present_paraDouble) {
        if (!(this_present_paraDouble && that_present_paraDouble))
          return false;
        if (!this.paraDouble.equals(that.paraDouble))
          return false;
      }

      boolean this_present_paraString = true && this.isSetParaString();
      boolean that_present_paraString = true && that.isSetParaString();
      if (this_present_paraString || that_present_paraString) {
        if (!(this_present_paraString && that_present_paraString))
          return false;
        if (!this.paraString.equals(that.paraString))
          return false;
      }

      boolean this_present_baseStruct = true && this.isSetBaseStruct();
      boolean that_present_baseStruct = true && that.isSetBaseStruct();
      if (this_present_baseStruct || that_present_baseStruct) {
        if (!(this_present_baseStruct && that_present_baseStruct))
          return false;
        if (!this.baseStruct.equals(that.baseStruct))
          return false;
      }

      boolean this_present_returnList = true && this.isSetReturnList();
      boolean that_present_returnList = true && that.isSetReturnList();
      if (this_present_returnList || that_present_returnList) {
        if (!(this_present_returnList && that_present_returnList))
          return false;
        if (!this.returnList.equals(that.returnList))
          return false;
      }

      boolean this_present_returnSet = true && this.isSetReturnSet();
      boolean that_present_returnSet = true && that.isSetReturnSet();
      if (this_present_returnSet || that_present_returnSet) {
        if (!(this_present_returnSet && that_present_returnSet))
          return false;
        if (!this.returnSet.equals(that.returnSet))
          return false;
      }

      boolean this_present_returnMap = true && this.isSetReturnMap();
      boolean that_present_returnMap = true && that.isSetReturnMap();
      if (this_present_returnMap || that_present_returnMap) {
        if (!(this_present_returnMap && that_present_returnMap))
          return false;
        if (!this.returnMap.equals(that.returnMap))
          return false;
      }

      boolean this_present_errorLevel = true && this.isSetErrorLevel();
      boolean that_present_errorLevel = true && that.isSetErrorLevel();
      if (this_present_errorLevel || that_present_errorLevel) {
        if (!(this_present_errorLevel && that_present_errorLevel))
          return false;
        if (!this.errorLevel.equals(that.errorLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paraBool = true && (isSetParaBool());
      list.add(present_paraBool);
      if (present_paraBool)
        list.add(paraBool);

      boolean present_paraI32 = true && (isSetParaI32());
      list.add(present_paraI32);
      if (present_paraI32)
        list.add(paraI32);

      boolean present_paraDouble = true && (isSetParaDouble());
      list.add(present_paraDouble);
      if (present_paraDouble)
        list.add(paraDouble);

      boolean present_paraString = true && (isSetParaString());
      list.add(present_paraString);
      if (present_paraString)
        list.add(paraString);

      boolean present_baseStruct = true && (isSetBaseStruct());
      list.add(present_baseStruct);
      if (present_baseStruct)
        list.add(baseStruct);

      boolean present_returnList = true && (isSetReturnList());
      list.add(present_returnList);
      if (present_returnList)
        list.add(returnList);

      boolean present_returnSet = true && (isSetReturnSet());
      list.add(present_returnSet);
      if (present_returnSet)
        list.add(returnSet);

      boolean present_returnMap = true && (isSetReturnMap());
      list.add(present_returnMap);
      if (present_returnMap)
        list.add(returnMap);

      boolean present_errorLevel = true && (isSetErrorLevel());
      list.add(present_errorLevel);
      if (present_errorLevel)
        list.add(errorLevel.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(paraMixedNoReturn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaBool()).compareTo(other.isSetParaBool());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaBool()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraBool, other.paraBool);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaI32()).compareTo(other.isSetParaI32());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaI32()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraI32, other.paraI32);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaDouble()).compareTo(other.isSetParaDouble());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaDouble()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraDouble, other.paraDouble);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaString()).compareTo(other.isSetParaString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraString, other.paraString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBaseStruct()).compareTo(other.isSetBaseStruct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseStruct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseStruct, other.baseStruct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnList()).compareTo(other.isSetReturnList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnList, other.returnList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnSet()).compareTo(other.isSetReturnSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnSet, other.returnSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnMap()).compareTo(other.isSetReturnMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMap, other.returnMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrorLevel()).compareTo(other.isSetErrorLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLevel, other.errorLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paraMixedNoReturn_args(");
      boolean first = true;

      if (isSetParaBool()) {
        sb.append("paraBool:");
        if (this.paraBool == null) {
          sb.append("null");
        } else {
          sb.append(this.paraBool);
        }
        first = false;
      }
      if (isSetParaI32()) {
        if (!first) sb.append(", ");
        sb.append("paraI32:");
        if (this.paraI32 == null) {
          sb.append("null");
        } else {
          sb.append(this.paraI32);
        }
        first = false;
      }
      if (isSetParaDouble()) {
        if (!first) sb.append(", ");
        sb.append("paraDouble:");
        if (this.paraDouble == null) {
          sb.append("null");
        } else {
          sb.append(this.paraDouble);
        }
        first = false;
      }
      if (isSetParaString()) {
        if (!first) sb.append(", ");
        sb.append("paraString:");
        if (this.paraString == null) {
          sb.append("null");
        } else {
          sb.append(this.paraString);
        }
        first = false;
      }
      if (isSetBaseStruct()) {
        if (!first) sb.append(", ");
        sb.append("baseStruct:");
        if (this.baseStruct == null) {
          sb.append("null");
        } else {
          sb.append(this.baseStruct);
        }
        first = false;
      }
      if (isSetReturnList()) {
        if (!first) sb.append(", ");
        sb.append("returnList:");
        if (this.returnList == null) {
          sb.append("null");
        } else {
          sb.append(this.returnList);
        }
        first = false;
      }
      if (isSetReturnSet()) {
        if (!first) sb.append(", ");
        sb.append("returnSet:");
        if (this.returnSet == null) {
          sb.append("null");
        } else {
          sb.append(this.returnSet);
        }
        first = false;
      }
      if (isSetReturnMap()) {
        if (!first) sb.append(", ");
        sb.append("returnMap:");
        if (this.returnMap == null) {
          sb.append("null");
        } else {
          sb.append(this.returnMap);
        }
        first = false;
      }
      if (isSetErrorLevel()) {
        if (!first) sb.append(", ");
        sb.append("errorLevel:");
        if (this.errorLevel == null) {
          sb.append("null");
        } else {
          sb.append(this.errorLevel);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (paraBool == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraBool' is unset! Struct:" + toString());
      }

      if (paraI32 == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraI32' is unset! Struct:" + toString());
      }

      if (paraDouble == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraDouble' is unset! Struct:" + toString());
      }

      if (paraString == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraString' is unset! Struct:" + toString());
      }

      if (baseStruct == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'baseStruct' is unset! Struct:" + toString());
      }

      if (returnList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnList' is unset! Struct:" + toString());
      }

      if (returnSet == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnSet' is unset! Struct:" + toString());
      }

      if (returnMap == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnMap' is unset! Struct:" + toString());
      }

      if (errorLevel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorLevel' is unset! Struct:" + toString());
      }

    }

    private static class paraMixedNoReturn_argsStandardSchemeFactory implements SchemeFactory {
      public paraMixedNoReturn_argsStandardScheme getScheme() {
        return new paraMixedNoReturn_argsStandardScheme();
      }
    }

    private static class paraMixedNoReturn_argsStandardScheme extends StandardScheme<paraMixedNoReturn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paraMixedNoReturn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_BOOL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.paraBool = iprot.readBool();
                struct.setParaBoolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARA_I32
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.paraI32 = iprot.readI32();
                struct.setParaI32IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARA_DOUBLE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.paraDouble = iprot.readDouble();
                struct.setParaDoubleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARA_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paraString = iprot.readString();
                struct.setParaStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BASE_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.baseStruct = new com.Miaoju.device.entity.BaseStruct();
                struct.baseStruct.read(iprot);
                struct.setBaseStructIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // RETURN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>(_list16.size);
                  com.Miaoju.device.entity.BaseStruct _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.Miaoju.device.entity.BaseStruct();
                    _elem17.read(iprot);
                    struct.returnList.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setReturnListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RETURN_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set19 = iprot.readSetBegin();
                  struct.returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>(2*_set19.size);
                  com.Miaoju.device.entity.BaseStruct _elem20;
                  for (int _i21 = 0; _i21 < _set19.size; ++_i21)
                  {
                    _elem20 = new com.Miaoju.device.entity.BaseStruct();
                    _elem20.read(iprot);
                    struct.returnSet.add(_elem20);
                  }
                  iprot.readSetEnd();
                }
                struct.setReturnSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RETURN_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map22 = iprot.readMapBegin();
                  struct.returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map22.size);
                  String _key23;
                  com.Miaoju.device.entity.BaseStruct _val24;
                  for (int _i25 = 0; _i25 < _map22.size; ++_i25)
                  {
                    _key23 = iprot.readString();
                    _val24 = new com.Miaoju.device.entity.BaseStruct();
                    _val24.read(iprot);
                    struct.returnMap.put(_key23, _val24);
                  }
                  iprot.readMapEnd();
                }
                struct.setReturnMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // ERROR_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorLevel = com.Miaoju.device.entity.ErrorLevel.findByValue(iprot.readI32());
                struct.setErrorLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paraMixedNoReturn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetParaBool()) {
          oprot.writeFieldBegin(PARA_BOOL_FIELD_DESC);
          oprot.writeBool(struct.paraBool);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaI32()) {
          oprot.writeFieldBegin(PARA_I32_FIELD_DESC);
          oprot.writeI32(struct.paraI32);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaDouble()) {
          oprot.writeFieldBegin(PARA_DOUBLE_FIELD_DESC);
          oprot.writeDouble(struct.paraDouble);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaString()) {
          oprot.writeFieldBegin(PARA_STRING_FIELD_DESC);
          oprot.writeString(struct.paraString);
          oprot.writeFieldEnd();
        }
        if (struct.isSetBaseStruct()) {
          oprot.writeFieldBegin(BASE_STRUCT_FIELD_DESC);
          struct.baseStruct.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnList()) {
          oprot.writeFieldBegin(RETURN_LIST_FIELD_DESC);
          {
            int _isize27 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter26 : struct.returnList)
            {
              if (_iter26 != null ) 
              {
                _isize27++;
              }
            }
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _isize27));
            for (com.Miaoju.device.entity.BaseStruct _iter26 : struct.returnList)
            {
              if (_iter26 != null ) {
                _iter26.write(oprot);
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnSet()) {
          oprot.writeFieldBegin(RETURN_SET_FIELD_DESC);
          {
            int _isize29 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter28 : struct.returnSet)
            {
              if (_iter28 != null ) 
              {
                _isize29++;
              }
            }
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _isize29));
            for (com.Miaoju.device.entity.BaseStruct _iter28 : struct.returnSet)
            {
              if (_iter28 != null ) {
            _iter28.write(oprot);
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnMap()) {
          oprot.writeFieldBegin(RETURN_MAP_FIELD_DESC);
          {
            int _isize31 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter30 : struct.returnMap.entrySet())

            {
              if (_iter30 != null &&_iter30.getValue() != null ) 
              {
                _isize31++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize31));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter30 : struct.returnMap.entrySet())
            {
              if (_iter30 != null && _iter30.getValue() != null) {
            oprot.writeString(_iter30.getKey());
            _iter30.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetErrorLevel()) {
          oprot.writeFieldBegin(ERROR_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.errorLevel.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class paraMixedNoReturn_result implements org.apache.thrift.TBase<paraMixedNoReturn_result, paraMixedNoReturn_result._Fields>, java.io.Serializable, Cloneable, Comparable<paraMixedNoReturn_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paraMixedNoReturn_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paraMixedNoReturn_resultStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paraMixedNoReturn_result.class, metaDataMap);
    }

    public paraMixedNoReturn_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paraMixedNoReturn_result(paraMixedNoReturn_result other) {
    }

    public paraMixedNoReturn_result deepCopy() {
      return new paraMixedNoReturn_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paraMixedNoReturn_result)
        return this.equals((paraMixedNoReturn_result)that);
      return false;
    }

    public boolean equals(paraMixedNoReturn_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(paraMixedNoReturn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paraMixedNoReturn_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class paraMixedNoReturn_resultStandardSchemeFactory implements SchemeFactory {
      public paraMixedNoReturn_resultStandardScheme getScheme() {
        return new paraMixedNoReturn_resultStandardScheme();
      }
    }

    private static class paraMixedNoReturn_resultStandardScheme extends StandardScheme<paraMixedNoReturn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paraMixedNoReturn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paraMixedNoReturn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class complexMethod_args implements org.apache.thrift.TBase<complexMethod_args, complexMethod_args._Fields>, java.io.Serializable, Cloneable, Comparable<complexMethod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("complexMethod_args");

    private static final org.apache.thrift.protocol.TField PARA_BOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("paraBool", org.apache.thrift.protocol.TType.BOOL, (short)1);
    private static final org.apache.thrift.protocol.TField PARA_I32_FIELD_DESC = new org.apache.thrift.protocol.TField("paraI32", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARA_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("paraDouble", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
    private static final org.apache.thrift.protocol.TField PARA_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("paraString", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField BASE_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("baseStruct", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField RETURN_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("returnList", org.apache.thrift.protocol.TType.LIST, (short)6);
    private static final org.apache.thrift.protocol.TField RETURN_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("returnSet", org.apache.thrift.protocol.TType.SET, (short)7);
    private static final org.apache.thrift.protocol.TField RETURN_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("returnMap", org.apache.thrift.protocol.TType.MAP, (short)8);
    private static final org.apache.thrift.protocol.TField ERROR_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("errorLevel", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new complexMethod_argsStandardSchemeFactory());
    }

    private Boolean paraBool; // default
    private Integer paraI32; // default
    private Double paraDouble; // default
    private String paraString; // default
    private com.Miaoju.device.entity.BaseStruct baseStruct; // default
    private List<com.Miaoju.device.entity.BaseStruct> returnList; // default
    private Set<com.Miaoju.device.entity.BaseStruct> returnSet; // default
    private Map<String,com.Miaoju.device.entity.BaseStruct> returnMap; // default
    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    private com.Miaoju.device.entity.ErrorLevel errorLevel; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARA_BOOL((short)1, "paraBool"),
      PARA_I32((short)2, "paraI32"),
      PARA_DOUBLE((short)3, "paraDouble"),
      PARA_STRING((short)4, "paraString"),
      BASE_STRUCT((short)5, "baseStruct"),
      RETURN_LIST((short)6, "returnList"),
      RETURN_SET((short)7, "returnSet"),
      RETURN_MAP((short)8, "returnMap"),
      /**
       * 
       * @see com.Miaoju.device.entity.ErrorLevel
       */
      ERROR_LEVEL((short)9, "errorLevel");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PARA_BOOL
            return PARA_BOOL;
          case 2: // PARA_I32
            return PARA_I32;
          case 3: // PARA_DOUBLE
            return PARA_DOUBLE;
          case 4: // PARA_STRING
            return PARA_STRING;
          case 5: // BASE_STRUCT
            return BASE_STRUCT;
          case 6: // RETURN_LIST
            return RETURN_LIST;
          case 7: // RETURN_SET
            return RETURN_SET;
          case 8: // RETURN_MAP
            return RETURN_MAP;
          case 9: // ERROR_LEVEL
            return ERROR_LEVEL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARABOOL_ISSET_ID = 0;
    private static final int __PARAI32_ISSET_ID = 1;
    private static final int __PARADOUBLE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARA_BOOL, new org.apache.thrift.meta_data.FieldMetaData("paraBool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.PARA_I32, new org.apache.thrift.meta_data.FieldMetaData("paraI32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARA_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("paraDouble", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.PARA_STRING, new org.apache.thrift.meta_data.FieldMetaData("paraString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BASE_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("baseStruct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class)));
      tmpMap.put(_Fields.RETURN_LIST, new org.apache.thrift.meta_data.FieldMetaData("returnList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.RETURN_SET, new org.apache.thrift.meta_data.FieldMetaData("returnSet", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.RETURN_MAP, new org.apache.thrift.meta_data.FieldMetaData("returnMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      tmpMap.put(_Fields.ERROR_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("errorLevel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.Miaoju.device.entity.ErrorLevel.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(complexMethod_args.class, metaDataMap);
    }

    public complexMethod_args() {
    }

    public complexMethod_args(
      Boolean paraBool,
      Integer paraI32,
      Double paraDouble,
      String paraString,
      com.Miaoju.device.entity.BaseStruct baseStruct,
      List<com.Miaoju.device.entity.BaseStruct> returnList,
      Set<com.Miaoju.device.entity.BaseStruct> returnSet,
      Map<String,com.Miaoju.device.entity.BaseStruct> returnMap,
      com.Miaoju.device.entity.ErrorLevel errorLevel)
    {
      this();
      if (paraBool != null ) {
        this.paraBool = paraBool;
        setParaBoolIsSet(true);
      } else {
        setParaBoolIsSet(false);
      }
      if (paraI32 != null ) {
        this.paraI32 = paraI32;
        setParaI32IsSet(true);
      } else {
        setParaI32IsSet(false);
      }
      if (paraDouble != null ) {
        this.paraDouble = paraDouble;
        setParaDoubleIsSet(true);
      } else {
        setParaDoubleIsSet(false);
      }
      if (paraString != null ) {
        this.paraString = paraString;
        setParaStringIsSet(true);
      } else {
        setParaStringIsSet(false);
      }
      if (baseStruct != null ) {
        this.baseStruct = baseStruct;
        setBaseStructIsSet(true);
      } else {
        setBaseStructIsSet(false);
      }
      if (returnList != null ) {
        this.returnList = returnList;
        setReturnListIsSet(true);
      } else {
        setReturnListIsSet(false);
      }
      if (returnSet != null ) {
        this.returnSet = returnSet;
        setReturnSetIsSet(true);
      } else {
        setReturnSetIsSet(false);
      }
      if (returnMap != null ) {
        this.returnMap = returnMap;
        setReturnMapIsSet(true);
      } else {
        setReturnMapIsSet(false);
      }
      if (errorLevel != null ) {
        this.errorLevel = errorLevel;
        setErrorLevelIsSet(true);
      } else {
        setErrorLevelIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public complexMethod_args(complexMethod_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.paraBool = other.paraBool;
      this.paraI32 = other.paraI32;
      this.paraDouble = other.paraDouble;
      if (other.isSetParaString()) {
        this.paraString = other.paraString;
      }
      if (other.isSetBaseStruct()) {
        this.baseStruct = new com.Miaoju.device.entity.BaseStruct(other.baseStruct);
      }
      if (other.isSetReturnList()) {
        List<com.Miaoju.device.entity.BaseStruct> __this__returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>(other.returnList.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.returnList) {
          __this__returnList.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.returnList = __this__returnList;
      }
      if (other.isSetReturnSet()) {
        Set<com.Miaoju.device.entity.BaseStruct> __this__returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>(other.returnSet.size());
        for (com.Miaoju.device.entity.BaseStruct other_element : other.returnSet) {
          __this__returnSet.add(new com.Miaoju.device.entity.BaseStruct(other_element));
        }
        this.returnSet = __this__returnSet;
      }
      if (other.isSetReturnMap()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.returnMap.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.returnMap.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__returnMap_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__returnMap_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__returnMap.put(__this__returnMap_copy_key, __this__returnMap_copy_value);
        }
        this.returnMap = __this__returnMap;
      }
      if (other.isSetErrorLevel()) {
        this.errorLevel = other.errorLevel;
      }
    }

    public complexMethod_args deepCopy() {
      return new complexMethod_args(this);
    }

    @Override
    public void clear() {
      setParaBoolIsSet(false);
      this.paraBool = null;
      setParaI32IsSet(false);
      this.paraI32 = null;
      setParaDoubleIsSet(false);
      this.paraDouble = null;
      setParaStringIsSet(false);
      this.paraString = null;
      setBaseStructIsSet(false);
      this.baseStruct = null;
      setReturnListIsSet(false);
      this.returnList = null;
      setReturnSetIsSet(false);
      this.returnSet = null;
      setReturnMapIsSet(false);
      this.returnMap = null;
      setErrorLevelIsSet(false);
      this.errorLevel = null;
    }

    public Boolean isParaBool() {
      return this.paraBool;
    }

    public complexMethod_args setParaBool(Boolean paraBool) {
      this.paraBool = paraBool;
      if (paraBool != null) {
        setParaBoolIsSet(true);
      } else {
        unsetParaBool();
      }
      return this;
    }

    public void unsetParaBool() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARABOOL_ISSET_ID);
    }

    /** Returns true if field paraBool is set (has been assigned a value) and false otherwise */
    public boolean isSetParaBool() {
      return EncodingUtils.testBit(__isset_bitfield, __PARABOOL_ISSET_ID);
    }

    public void setParaBoolIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARABOOL_ISSET_ID, value);
    }

    public Integer getParaI32() {
      return this.paraI32;
    }

    public complexMethod_args setParaI32(Integer paraI32) {
      this.paraI32 = paraI32;
      if (paraI32 != null) {
        setParaI32IsSet(true);
      } else {
        unsetParaI32();
      }
      return this;
    }

    public void unsetParaI32() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARAI32_ISSET_ID);
    }

    /** Returns true if field paraI32 is set (has been assigned a value) and false otherwise */
    public boolean isSetParaI32() {
      return EncodingUtils.testBit(__isset_bitfield, __PARAI32_ISSET_ID);
    }

    public void setParaI32IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARAI32_ISSET_ID, value);
    }

    public Double getParaDouble() {
      return this.paraDouble;
    }

    public complexMethod_args setParaDouble(Double paraDouble) {
      this.paraDouble = paraDouble;
      if (paraDouble != null) {
        setParaDoubleIsSet(true);
      } else {
        unsetParaDouble();
      }
      return this;
    }

    public void unsetParaDouble() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARADOUBLE_ISSET_ID);
    }

    /** Returns true if field paraDouble is set (has been assigned a value) and false otherwise */
    public boolean isSetParaDouble() {
      return EncodingUtils.testBit(__isset_bitfield, __PARADOUBLE_ISSET_ID);
    }

    public void setParaDoubleIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARADOUBLE_ISSET_ID, value);
    }

    public String getParaString() {
      return this.paraString;
    }

    public complexMethod_args setParaString(String paraString) {
      this.paraString = paraString;
      if (paraString != null) {
        setParaStringIsSet(true);
      } else {
        unsetParaString();
      }
      return this;
    }

    public void unsetParaString() {
      this.paraString = null;
    }

    /** Returns true if field paraString is set (has been assigned a value) and false otherwise */
    public boolean isSetParaString() {
      return this.paraString != null;
    }

    public void setParaStringIsSet(boolean value) {
      if (!value) {
        this.paraString = null;
      }
    }

    public com.Miaoju.device.entity.BaseStruct getBaseStruct() {
      return this.baseStruct;
    }

    public complexMethod_args setBaseStruct(com.Miaoju.device.entity.BaseStruct baseStruct) {
      this.baseStruct = baseStruct;
      if (baseStruct != null) {
        setBaseStructIsSet(true);
      } else {
        unsetBaseStruct();
      }
      return this;
    }

    public void unsetBaseStruct() {
      this.baseStruct = null;
    }

    /** Returns true if field baseStruct is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseStruct() {
      return this.baseStruct != null;
    }

    public void setBaseStructIsSet(boolean value) {
      if (!value) {
        this.baseStruct = null;
      }
    }

    public int getReturnListSize() {
      return (this.returnList == null) ? 0 : this.returnList.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getReturnListIterator() {
      return (this.returnList == null) ? null : this.returnList.iterator();
    }

    public void addToReturnList(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.returnList == null) {
        this.returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnList.add(elem);
    }

    public List<com.Miaoju.device.entity.BaseStruct> getReturnList() {
      return this.returnList;
    }

    public complexMethod_args setReturnList(List<com.Miaoju.device.entity.BaseStruct> returnList) {
      this.returnList = returnList;
      if (returnList != null) {
        setReturnListIsSet(true);
      } else {
        unsetReturnList();
      }
      return this;
    }

    public void unsetReturnList() {
      this.returnList = null;
    }

    /** Returns true if field returnList is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnList() {
      return this.returnList != null;
    }

    public void setReturnListIsSet(boolean value) {
      if (!value) {
        this.returnList = null;
      }
    }

    public int getReturnSetSize() {
      return (this.returnSet == null) ? 0 : this.returnSet.size();
    }

    public java.util.Iterator<com.Miaoju.device.entity.BaseStruct> getReturnSetIterator() {
      return (this.returnSet == null) ? null : this.returnSet.iterator();
    }

    public void addToReturnSet(com.Miaoju.device.entity.BaseStruct elem) {
      if (this.returnSet == null) {
        this.returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnSet.add(elem);
    }

    public Set<com.Miaoju.device.entity.BaseStruct> getReturnSet() {
      return this.returnSet;
    }

    public complexMethod_args setReturnSet(Set<com.Miaoju.device.entity.BaseStruct> returnSet) {
      this.returnSet = returnSet;
      if (returnSet != null) {
        setReturnSetIsSet(true);
      } else {
        unsetReturnSet();
      }
      return this;
    }

    public void unsetReturnSet() {
      this.returnSet = null;
    }

    /** Returns true if field returnSet is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnSet() {
      return this.returnSet != null;
    }

    public void setReturnSetIsSet(boolean value) {
      if (!value) {
        this.returnSet = null;
      }
    }

    public int getReturnMapSize() {
      return (this.returnMap == null) ? 0 : this.returnMap.size();
    }

    public void putToReturnMap(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.returnMap == null) {
        this.returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.returnMap.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getReturnMap() {
      return this.returnMap;
    }

    public complexMethod_args setReturnMap(Map<String,com.Miaoju.device.entity.BaseStruct> returnMap) {
      this.returnMap = returnMap;
      if (returnMap != null) {
        setReturnMapIsSet(true);
      } else {
        unsetReturnMap();
      }
      return this;
    }

    public void unsetReturnMap() {
      this.returnMap = null;
    }

    /** Returns true if field returnMap is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnMap() {
      return this.returnMap != null;
    }

    public void setReturnMapIsSet(boolean value) {
      if (!value) {
        this.returnMap = null;
      }
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public com.Miaoju.device.entity.ErrorLevel getErrorLevel() {
      return this.errorLevel;
    }

    /**
     * 
     * @see com.Miaoju.device.entity.ErrorLevel
     */
    public complexMethod_args setErrorLevel(com.Miaoju.device.entity.ErrorLevel errorLevel) {
      this.errorLevel = errorLevel;
      if (errorLevel != null) {
        setErrorLevelIsSet(true);
      } else {
        unsetErrorLevel();
      }
      return this;
    }

    public void unsetErrorLevel() {
      this.errorLevel = null;
    }

    /** Returns true if field errorLevel is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorLevel() {
      return this.errorLevel != null;
    }

    public void setErrorLevelIsSet(boolean value) {
      if (!value) {
        this.errorLevel = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PARA_BOOL:
        if (value == null) {
          unsetParaBool();
        } else {
          setParaBool((Boolean)value);
        }
        break;

      case PARA_I32:
        if (value == null) {
          unsetParaI32();
        } else {
          setParaI32((Integer)value);
        }
        break;

      case PARA_DOUBLE:
        if (value == null) {
          unsetParaDouble();
        } else {
          setParaDouble((Double)value);
        }
        break;

      case PARA_STRING:
        if (value == null) {
          unsetParaString();
        } else {
          setParaString((String)value);
        }
        break;

      case BASE_STRUCT:
        if (value == null) {
          unsetBaseStruct();
        } else {
          setBaseStruct((com.Miaoju.device.entity.BaseStruct)value);
        }
        break;

      case RETURN_LIST:
        if (value == null) {
          unsetReturnList();
        } else {
          setReturnList((List<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case RETURN_SET:
        if (value == null) {
          unsetReturnSet();
        } else {
          setReturnSet((Set<com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case RETURN_MAP:
        if (value == null) {
          unsetReturnMap();
        } else {
          setReturnMap((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      case ERROR_LEVEL:
        if (value == null) {
          unsetErrorLevel();
        } else {
          setErrorLevel((com.Miaoju.device.entity.ErrorLevel)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PARA_BOOL:
        if (isParaBool() != null) {
          return Boolean.valueOf(isParaBool());
        }
        return null;
      case PARA_I32:
        if (getParaI32() != null) {
          return Integer.valueOf(getParaI32());
        }
        return null;
      case PARA_DOUBLE:
        if (getParaDouble() != null) {
          return Double.valueOf(getParaDouble());
        }
        return null;
      case PARA_STRING:
        if (getParaString() != null) {
          return getParaString();

        }
        return null;
      case BASE_STRUCT:
        if (getBaseStruct() != null) {
          return getBaseStruct();

        }
        return null;
      case RETURN_LIST:
        if (getReturnList() != null) {
          return getReturnList();

        }
        return null;
      case RETURN_SET:
        if (getReturnSet() != null) {
          return getReturnSet();

        }
        return null;
      case RETURN_MAP:
        if (getReturnMap() != null) {
          return getReturnMap();

        }
        return null;
      case ERROR_LEVEL:
        if (getErrorLevel() != null) {
          return getErrorLevel();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PARA_BOOL:
        return isSetParaBool();
      case PARA_I32:
        return isSetParaI32();
      case PARA_DOUBLE:
        return isSetParaDouble();
      case PARA_STRING:
        return isSetParaString();
      case BASE_STRUCT:
        return isSetBaseStruct();
      case RETURN_LIST:
        return isSetReturnList();
      case RETURN_SET:
        return isSetReturnSet();
      case RETURN_MAP:
        return isSetReturnMap();
      case ERROR_LEVEL:
        return isSetErrorLevel();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof complexMethod_args)
        return this.equals((complexMethod_args)that);
      return false;
    }

    public boolean equals(complexMethod_args that) {
      if (that == null)
        return false;

      boolean this_present_paraBool = true && this.isSetParaBool();
      boolean that_present_paraBool = true && that.isSetParaBool();
      if (this_present_paraBool || that_present_paraBool) {
        if (!(this_present_paraBool && that_present_paraBool))
          return false;
        if (!this.paraBool.equals(that.paraBool))
          return false;
      }

      boolean this_present_paraI32 = true && this.isSetParaI32();
      boolean that_present_paraI32 = true && that.isSetParaI32();
      if (this_present_paraI32 || that_present_paraI32) {
        if (!(this_present_paraI32 && that_present_paraI32))
          return false;
        if (!this.paraI32.equals(that.paraI32))
          return false;
      }

      boolean this_present_paraDouble = true && this.isSetParaDouble();
      boolean that_present_paraDouble = true && that.isSetParaDouble();
      if (this_present_paraDouble || that_present_paraDouble) {
        if (!(this_present_paraDouble && that_present_paraDouble))
          return false;
        if (!this.paraDouble.equals(that.paraDouble))
          return false;
      }

      boolean this_present_paraString = true && this.isSetParaString();
      boolean that_present_paraString = true && that.isSetParaString();
      if (this_present_paraString || that_present_paraString) {
        if (!(this_present_paraString && that_present_paraString))
          return false;
        if (!this.paraString.equals(that.paraString))
          return false;
      }

      boolean this_present_baseStruct = true && this.isSetBaseStruct();
      boolean that_present_baseStruct = true && that.isSetBaseStruct();
      if (this_present_baseStruct || that_present_baseStruct) {
        if (!(this_present_baseStruct && that_present_baseStruct))
          return false;
        if (!this.baseStruct.equals(that.baseStruct))
          return false;
      }

      boolean this_present_returnList = true && this.isSetReturnList();
      boolean that_present_returnList = true && that.isSetReturnList();
      if (this_present_returnList || that_present_returnList) {
        if (!(this_present_returnList && that_present_returnList))
          return false;
        if (!this.returnList.equals(that.returnList))
          return false;
      }

      boolean this_present_returnSet = true && this.isSetReturnSet();
      boolean that_present_returnSet = true && that.isSetReturnSet();
      if (this_present_returnSet || that_present_returnSet) {
        if (!(this_present_returnSet && that_present_returnSet))
          return false;
        if (!this.returnSet.equals(that.returnSet))
          return false;
      }

      boolean this_present_returnMap = true && this.isSetReturnMap();
      boolean that_present_returnMap = true && that.isSetReturnMap();
      if (this_present_returnMap || that_present_returnMap) {
        if (!(this_present_returnMap && that_present_returnMap))
          return false;
        if (!this.returnMap.equals(that.returnMap))
          return false;
      }

      boolean this_present_errorLevel = true && this.isSetErrorLevel();
      boolean that_present_errorLevel = true && that.isSetErrorLevel();
      if (this_present_errorLevel || that_present_errorLevel) {
        if (!(this_present_errorLevel && that_present_errorLevel))
          return false;
        if (!this.errorLevel.equals(that.errorLevel))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_paraBool = true && (isSetParaBool());
      list.add(present_paraBool);
      if (present_paraBool)
        list.add(paraBool);

      boolean present_paraI32 = true && (isSetParaI32());
      list.add(present_paraI32);
      if (present_paraI32)
        list.add(paraI32);

      boolean present_paraDouble = true && (isSetParaDouble());
      list.add(present_paraDouble);
      if (present_paraDouble)
        list.add(paraDouble);

      boolean present_paraString = true && (isSetParaString());
      list.add(present_paraString);
      if (present_paraString)
        list.add(paraString);

      boolean present_baseStruct = true && (isSetBaseStruct());
      list.add(present_baseStruct);
      if (present_baseStruct)
        list.add(baseStruct);

      boolean present_returnList = true && (isSetReturnList());
      list.add(present_returnList);
      if (present_returnList)
        list.add(returnList);

      boolean present_returnSet = true && (isSetReturnSet());
      list.add(present_returnSet);
      if (present_returnSet)
        list.add(returnSet);

      boolean present_returnMap = true && (isSetReturnMap());
      list.add(present_returnMap);
      if (present_returnMap)
        list.add(returnMap);

      boolean present_errorLevel = true && (isSetErrorLevel());
      list.add(present_errorLevel);
      if (present_errorLevel)
        list.add(errorLevel.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(complexMethod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetParaBool()).compareTo(other.isSetParaBool());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaBool()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraBool, other.paraBool);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaI32()).compareTo(other.isSetParaI32());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaI32()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraI32, other.paraI32);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaDouble()).compareTo(other.isSetParaDouble());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaDouble()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraDouble, other.paraDouble);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParaString()).compareTo(other.isSetParaString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParaString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paraString, other.paraString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBaseStruct()).compareTo(other.isSetBaseStruct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseStruct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseStruct, other.baseStruct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnList()).compareTo(other.isSetReturnList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnList, other.returnList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnSet()).compareTo(other.isSetReturnSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnSet()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnSet, other.returnSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReturnMap()).compareTo(other.isSetReturnMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.returnMap, other.returnMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErrorLevel()).compareTo(other.isSetErrorLevel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorLevel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorLevel, other.errorLevel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("complexMethod_args(");
      boolean first = true;

      if (isSetParaBool()) {
        sb.append("paraBool:");
        if (this.paraBool == null) {
          sb.append("null");
        } else {
          sb.append(this.paraBool);
        }
        first = false;
      }
      if (isSetParaI32()) {
        if (!first) sb.append(", ");
        sb.append("paraI32:");
        if (this.paraI32 == null) {
          sb.append("null");
        } else {
          sb.append(this.paraI32);
        }
        first = false;
      }
      if (isSetParaDouble()) {
        if (!first) sb.append(", ");
        sb.append("paraDouble:");
        if (this.paraDouble == null) {
          sb.append("null");
        } else {
          sb.append(this.paraDouble);
        }
        first = false;
      }
      if (isSetParaString()) {
        if (!first) sb.append(", ");
        sb.append("paraString:");
        if (this.paraString == null) {
          sb.append("null");
        } else {
          sb.append(this.paraString);
        }
        first = false;
      }
      if (isSetBaseStruct()) {
        if (!first) sb.append(", ");
        sb.append("baseStruct:");
        if (this.baseStruct == null) {
          sb.append("null");
        } else {
          sb.append(this.baseStruct);
        }
        first = false;
      }
      if (isSetReturnList()) {
        if (!first) sb.append(", ");
        sb.append("returnList:");
        if (this.returnList == null) {
          sb.append("null");
        } else {
          sb.append(this.returnList);
        }
        first = false;
      }
      if (isSetReturnSet()) {
        if (!first) sb.append(", ");
        sb.append("returnSet:");
        if (this.returnSet == null) {
          sb.append("null");
        } else {
          sb.append(this.returnSet);
        }
        first = false;
      }
      if (isSetReturnMap()) {
        if (!first) sb.append(", ");
        sb.append("returnMap:");
        if (this.returnMap == null) {
          sb.append("null");
        } else {
          sb.append(this.returnMap);
        }
        first = false;
      }
      if (isSetErrorLevel()) {
        if (!first) sb.append(", ");
        sb.append("errorLevel:");
        if (this.errorLevel == null) {
          sb.append("null");
        } else {
          sb.append(this.errorLevel);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (paraBool == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraBool' is unset! Struct:" + toString());
      }

      if (paraI32 == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraI32' is unset! Struct:" + toString());
      }

      if (paraDouble == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraDouble' is unset! Struct:" + toString());
      }

      if (paraString == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'paraString' is unset! Struct:" + toString());
      }

      if (baseStruct == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'baseStruct' is unset! Struct:" + toString());
      }

      if (returnList == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnList' is unset! Struct:" + toString());
      }

      if (returnSet == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnSet' is unset! Struct:" + toString());
      }

      if (returnMap == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'returnMap' is unset! Struct:" + toString());
      }

      if (errorLevel == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errorLevel' is unset! Struct:" + toString());
      }

    }

    private static class complexMethod_argsStandardSchemeFactory implements SchemeFactory {
      public complexMethod_argsStandardScheme getScheme() {
        return new complexMethod_argsStandardScheme();
      }
    }

    private static class complexMethod_argsStandardScheme extends StandardScheme<complexMethod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, complexMethod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PARA_BOOL
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.paraBool = iprot.readBool();
                struct.setParaBoolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARA_I32
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.paraI32 = iprot.readI32();
                struct.setParaI32IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARA_DOUBLE
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.paraDouble = iprot.readDouble();
                struct.setParaDoubleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PARA_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.paraString = iprot.readString();
                struct.setParaStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // BASE_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.baseStruct = new com.Miaoju.device.entity.BaseStruct();
                struct.baseStruct.read(iprot);
                struct.setBaseStructIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // RETURN_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.returnList = new ArrayList<com.Miaoju.device.entity.BaseStruct>(_list32.size);
                  com.Miaoju.device.entity.BaseStruct _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.Miaoju.device.entity.BaseStruct();
                    _elem33.read(iprot);
                    struct.returnList.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setReturnListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // RETURN_SET
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                  struct.returnSet = new HashSet<com.Miaoju.device.entity.BaseStruct>(2*_set35.size);
                  com.Miaoju.device.entity.BaseStruct _elem36;
                  for (int _i37 = 0; _i37 < _set35.size; ++_i37)
                  {
                    _elem36 = new com.Miaoju.device.entity.BaseStruct();
                    _elem36.read(iprot);
                    struct.returnSet.add(_elem36);
                  }
                  iprot.readSetEnd();
                }
                struct.setReturnSetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // RETURN_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                  struct.returnMap = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map38.size);
                  String _key39;
                  com.Miaoju.device.entity.BaseStruct _val40;
                  for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                  {
                    _key39 = iprot.readString();
                    _val40 = new com.Miaoju.device.entity.BaseStruct();
                    _val40.read(iprot);
                    struct.returnMap.put(_key39, _val40);
                  }
                  iprot.readMapEnd();
                }
                struct.setReturnMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // ERROR_LEVEL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorLevel = com.Miaoju.device.entity.ErrorLevel.findByValue(iprot.readI32());
                struct.setErrorLevelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, complexMethod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetParaBool()) {
          oprot.writeFieldBegin(PARA_BOOL_FIELD_DESC);
          oprot.writeBool(struct.paraBool);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaI32()) {
          oprot.writeFieldBegin(PARA_I32_FIELD_DESC);
          oprot.writeI32(struct.paraI32);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaDouble()) {
          oprot.writeFieldBegin(PARA_DOUBLE_FIELD_DESC);
          oprot.writeDouble(struct.paraDouble);
          oprot.writeFieldEnd();
        }
        if (struct.isSetParaString()) {
          oprot.writeFieldBegin(PARA_STRING_FIELD_DESC);
          oprot.writeString(struct.paraString);
          oprot.writeFieldEnd();
        }
        if (struct.isSetBaseStruct()) {
          oprot.writeFieldBegin(BASE_STRUCT_FIELD_DESC);
          struct.baseStruct.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnList()) {
          oprot.writeFieldBegin(RETURN_LIST_FIELD_DESC);
          {
            int _isize43 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter42 : struct.returnList)
            {
              if (_iter42 != null ) 
              {
                _isize43++;
              }
            }
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _isize43));
            for (com.Miaoju.device.entity.BaseStruct _iter42 : struct.returnList)
            {
              if (_iter42 != null ) {
                _iter42.write(oprot);
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnSet()) {
          oprot.writeFieldBegin(RETURN_SET_FIELD_DESC);
          {
            int _isize45 = 0;
            for (com.Miaoju.device.entity.BaseStruct _iter44 : struct.returnSet)
            {
              if (_iter44 != null ) 
              {
                _isize45++;
              }
            }
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, _isize45));
            for (com.Miaoju.device.entity.BaseStruct _iter44 : struct.returnSet)
            {
              if (_iter44 != null ) {
            _iter44.write(oprot);
              }
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetReturnMap()) {
          oprot.writeFieldBegin(RETURN_MAP_FIELD_DESC);
          {
            int _isize47 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter46 : struct.returnMap.entrySet())

            {
              if (_iter46 != null &&_iter46.getValue() != null ) 
              {
                _isize47++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize47));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter46 : struct.returnMap.entrySet())
            {
              if (_iter46 != null && _iter46.getValue() != null) {
            oprot.writeString(_iter46.getKey());
            _iter46.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.isSetErrorLevel()) {
          oprot.writeFieldBegin(ERROR_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.errorLevel.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class complexMethod_result implements org.apache.thrift.TBase<complexMethod_result, complexMethod_result._Fields>, java.io.Serializable, Cloneable, Comparable<complexMethod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("complexMethod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new complexMethod_resultStandardSchemeFactory());
    }

    private Map<String,com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(complexMethod_result.class, metaDataMap);
    }

    public complexMethod_result() {
    }

    public complexMethod_result(
      Map<String,com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public complexMethod_result(complexMethod_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__success_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public complexMethod_result deepCopy() {
      return new complexMethod_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public complexMethod_result setSuccess(Map<String,com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof complexMethod_result)
        return this.equals((complexMethod_result)that);
      return false;
    }

    public boolean equals(complexMethod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(complexMethod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("complexMethod_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class complexMethod_resultStandardSchemeFactory implements SchemeFactory {
      public complexMethod_resultStandardScheme getScheme() {
        return new complexMethod_resultStandardScheme();
      }
    }

    private static class complexMethod_resultStandardScheme extends StandardScheme<complexMethod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, complexMethod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map48.size);
                  String _key49;
                  com.Miaoju.device.entity.BaseStruct _val50;
                  for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                  {
                    _key49 = iprot.readString();
                    _val50 = new com.Miaoju.device.entity.BaseStruct();
                    _val50.read(iprot);
                    struct.success.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, complexMethod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize53 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter52 : struct.success.entrySet())

            {
              if (_iter52 != null &&_iter52.getValue() != null ) 
              {
                _isize53++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize53));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter52 : struct.success.entrySet())
            {
              if (_iter52 != null && _iter52.getValue() != null) {
            oprot.writeString(_iter52.getKey());
            _iter52.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
