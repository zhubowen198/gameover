/**
 * Autogenerated by Thrift Compiler (0.9.2)-v1.0.1
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * THIS IS MODIFIED FOR ZAN GROUP, ANY PROBLEM PLS CONTACT Zan Group<zan@zanphp.io>
 * @generated
 */
package com.miaoju.device.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)-v1.0.1", date = "2018-4-18")
public interface DeviceService {

  public Void throwException() throws com.Miaoju.device.exception.DeviceServiceException;

  public Map<String,com.Miaoju.device.entity.BaseStruct> getdeviceid(com.Miaoju.device.entity.DeviceStruct device_struct);

  public Map<String,com.Miaoju.device.entity.BaseStruct> createdevice(com.Miaoju.device.entity.DeviceStruct device_struct);

  public Map<String,com.Miaoju.device.entity.BaseStruct> updatedevice(com.Miaoju.device.entity.DeviceStruct device_struct);

  public static class throwException_args implements org.apache.thrift.TBase<throwException_args, throwException_args._Fields>, java.io.Serializable, Cloneable, Comparable<throwException_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("throwException_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new throwException_argsStandardSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(throwException_args.class, metaDataMap);
    }

    public throwException_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public throwException_args(throwException_args other) {
    }

    public throwException_args deepCopy() {
      return new throwException_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof throwException_args)
        return this.equals((throwException_args)that);
      return false;
    }

    public boolean equals(throwException_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(throwException_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("throwException_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
    }

    private static class throwException_argsStandardSchemeFactory implements SchemeFactory {
      public throwException_argsStandardScheme getScheme() {
        return new throwException_argsStandardScheme();
      }
    }

    private static class throwException_argsStandardScheme extends StandardScheme<throwException_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, throwException_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, throwException_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class throwException_result implements org.apache.thrift.TBase<throwException_result, throwException_result._Fields>, java.io.Serializable, Cloneable, Comparable<throwException_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("throwException_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new throwException_resultStandardSchemeFactory());
    }

    private com.Miaoju.device.exception.DeviceServiceException e; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(throwException_result.class, metaDataMap);
    }

    public throwException_result() {
    }

    public throwException_result(
      com.Miaoju.device.exception.DeviceServiceException e)
    {
      this();
      if (e != null ) {
        this.e = e;
        setEIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public throwException_result(throwException_result other) {
      if (other.isSetE()) {
        this.e = new com.Miaoju.device.exception.DeviceServiceException(other.e);
      }
    }

    public throwException_result deepCopy() {
      return new throwException_result(this);
    }

    @Override
    public void clear() {
      setEIsSet(false);
      this.e = null;
    }

    public com.Miaoju.device.exception.DeviceServiceException getE() {
      return this.e;
    }

    public throwException_result setE(com.Miaoju.device.exception.DeviceServiceException e) {
      this.e = e;
      if (e != null) {
        setEIsSet(true);
      } else {
        unsetE();
      }
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.Miaoju.device.exception.DeviceServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        if (getE() != null) {
          return getE();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof throwException_result)
        return this.equals((throwException_result)that);
      return false;
    }

    public boolean equals(throwException_result that) {
      if (that == null)
        return false;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_e = true && (isSetE());
      list.add(present_e);
      if (present_e)
        list.add(e);

      return list.hashCode();
    }

    @Override
    public int compareTo(throwException_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("throwException_result(");
      boolean first = true;

      if (isSetE()) {
        sb.append("e:");
        if (this.e == null) {
          sb.append("null");
        } else {
          sb.append(this.e);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class throwException_resultStandardSchemeFactory implements SchemeFactory {
      public throwException_resultStandardScheme getScheme() {
        return new throwException_resultStandardScheme();
      }
    }

    private static class throwException_resultStandardScheme extends StandardScheme<throwException_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, throwException_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.Miaoju.device.exception.DeviceServiceException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, throwException_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetE()) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getdeviceid_args implements org.apache.thrift.TBase<getdeviceid_args, getdeviceid_args._Fields>, java.io.Serializable, Cloneable, Comparable<getdeviceid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getdeviceid_args");

    private static final org.apache.thrift.protocol.TField DEVICE_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("device_struct", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getdeviceid_argsStandardSchemeFactory());
    }

    private com.Miaoju.device.entity.DeviceStruct device_struct; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_STRUCT((short)1, "device_struct");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_STRUCT
            return DEVICE_STRUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("device_struct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.DeviceStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getdeviceid_args.class, metaDataMap);
    }

    public getdeviceid_args() {
    }

    public getdeviceid_args(
      com.Miaoju.device.entity.DeviceStruct device_struct)
    {
      this();
      if (device_struct != null ) {
        this.device_struct = device_struct;
        setDevice_structIsSet(true);
      } else {
        setDevice_structIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getdeviceid_args(getdeviceid_args other) {
      if (other.isSetDevice_struct()) {
        this.device_struct = new com.Miaoju.device.entity.DeviceStruct(other.device_struct);
      }
    }

    public getdeviceid_args deepCopy() {
      return new getdeviceid_args(this);
    }

    @Override
    public void clear() {
      setDevice_structIsSet(false);
      this.device_struct = null;
    }

    public com.Miaoju.device.entity.DeviceStruct getDevice_struct() {
      return this.device_struct;
    }

    public getdeviceid_args setDevice_struct(com.Miaoju.device.entity.DeviceStruct device_struct) {
      this.device_struct = device_struct;
      if (device_struct != null) {
        setDevice_structIsSet(true);
      } else {
        unsetDevice_struct();
      }
      return this;
    }

    public void unsetDevice_struct() {
      this.device_struct = null;
    }

    /** Returns true if field device_struct is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_struct() {
      return this.device_struct != null;
    }

    public void setDevice_structIsSet(boolean value) {
      if (!value) {
        this.device_struct = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_STRUCT:
        if (value == null) {
          unsetDevice_struct();
        } else {
          setDevice_struct((com.Miaoju.device.entity.DeviceStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_STRUCT:
        if (getDevice_struct() != null) {
          return getDevice_struct();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_STRUCT:
        return isSetDevice_struct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getdeviceid_args)
        return this.equals((getdeviceid_args)that);
      return false;
    }

    public boolean equals(getdeviceid_args that) {
      if (that == null)
        return false;

      boolean this_present_device_struct = true && this.isSetDevice_struct();
      boolean that_present_device_struct = true && that.isSetDevice_struct();
      if (this_present_device_struct || that_present_device_struct) {
        if (!(this_present_device_struct && that_present_device_struct))
          return false;
        if (!this.device_struct.equals(that.device_struct))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_struct = true && (isSetDevice_struct());
      list.add(present_device_struct);
      if (present_device_struct)
        list.add(device_struct);

      return list.hashCode();
    }

    @Override
    public int compareTo(getdeviceid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_struct()).compareTo(other.isSetDevice_struct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_struct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_struct, other.device_struct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getdeviceid_args(");
      boolean first = true;

      if (isSetDevice_struct()) {
        sb.append("device_struct:");
        if (this.device_struct == null) {
          sb.append("null");
        } else {
          sb.append(this.device_struct);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (device_struct == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'device_struct' is unset! Struct:" + toString());
      }

    }

    private static class getdeviceid_argsStandardSchemeFactory implements SchemeFactory {
      public getdeviceid_argsStandardScheme getScheme() {
        return new getdeviceid_argsStandardScheme();
      }
    }

    private static class getdeviceid_argsStandardScheme extends StandardScheme<getdeviceid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getdeviceid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device_struct = new com.Miaoju.device.entity.DeviceStruct();
                struct.device_struct.read(iprot);
                struct.setDevice_structIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getdeviceid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetDevice_struct()) {
          oprot.writeFieldBegin(DEVICE_STRUCT_FIELD_DESC);
          struct.device_struct.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class getdeviceid_result implements org.apache.thrift.TBase<getdeviceid_result, getdeviceid_result._Fields>, java.io.Serializable, Cloneable, Comparable<getdeviceid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getdeviceid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getdeviceid_resultStandardSchemeFactory());
    }

    private Map<String,com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getdeviceid_result.class, metaDataMap);
    }

    public getdeviceid_result() {
    }

    public getdeviceid_result(
      Map<String,com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getdeviceid_result(getdeviceid_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__success_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public getdeviceid_result deepCopy() {
      return new getdeviceid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public getdeviceid_result setSuccess(Map<String,com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getdeviceid_result)
        return this.equals((getdeviceid_result)that);
      return false;
    }

    public boolean equals(getdeviceid_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getdeviceid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getdeviceid_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class getdeviceid_resultStandardSchemeFactory implements SchemeFactory {
      public getdeviceid_resultStandardScheme getScheme() {
        return new getdeviceid_resultStandardScheme();
      }
    }

    private static class getdeviceid_resultStandardScheme extends StandardScheme<getdeviceid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getdeviceid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map0.size);
                  String _key1;
                  com.Miaoju.device.entity.BaseStruct _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = new com.Miaoju.device.entity.BaseStruct();
                    _val2.read(iprot);
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getdeviceid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize5 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter4 : struct.success.entrySet())

            {
              if (_iter4 != null &&_iter4.getValue() != null ) 
              {
                _isize5++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize5));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter4 : struct.success.entrySet())
            {
              if (_iter4 != null && _iter4.getValue() != null) {
            oprot.writeString(_iter4.getKey());
            _iter4.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class createdevice_args implements org.apache.thrift.TBase<createdevice_args, createdevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<createdevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createdevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("device_struct", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createdevice_argsStandardSchemeFactory());
    }

    private com.Miaoju.device.entity.DeviceStruct device_struct; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_STRUCT((short)1, "device_struct");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_STRUCT
            return DEVICE_STRUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("device_struct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.DeviceStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createdevice_args.class, metaDataMap);
    }

    public createdevice_args() {
    }

    public createdevice_args(
      com.Miaoju.device.entity.DeviceStruct device_struct)
    {
      this();
      if (device_struct != null ) {
        this.device_struct = device_struct;
        setDevice_structIsSet(true);
      } else {
        setDevice_structIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createdevice_args(createdevice_args other) {
      if (other.isSetDevice_struct()) {
        this.device_struct = new com.Miaoju.device.entity.DeviceStruct(other.device_struct);
      }
    }

    public createdevice_args deepCopy() {
      return new createdevice_args(this);
    }

    @Override
    public void clear() {
      setDevice_structIsSet(false);
      this.device_struct = null;
    }

    public com.Miaoju.device.entity.DeviceStruct getDevice_struct() {
      return this.device_struct;
    }

    public createdevice_args setDevice_struct(com.Miaoju.device.entity.DeviceStruct device_struct) {
      this.device_struct = device_struct;
      if (device_struct != null) {
        setDevice_structIsSet(true);
      } else {
        unsetDevice_struct();
      }
      return this;
    }

    public void unsetDevice_struct() {
      this.device_struct = null;
    }

    /** Returns true if field device_struct is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_struct() {
      return this.device_struct != null;
    }

    public void setDevice_structIsSet(boolean value) {
      if (!value) {
        this.device_struct = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_STRUCT:
        if (value == null) {
          unsetDevice_struct();
        } else {
          setDevice_struct((com.Miaoju.device.entity.DeviceStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_STRUCT:
        if (getDevice_struct() != null) {
          return getDevice_struct();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_STRUCT:
        return isSetDevice_struct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createdevice_args)
        return this.equals((createdevice_args)that);
      return false;
    }

    public boolean equals(createdevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device_struct = true && this.isSetDevice_struct();
      boolean that_present_device_struct = true && that.isSetDevice_struct();
      if (this_present_device_struct || that_present_device_struct) {
        if (!(this_present_device_struct && that_present_device_struct))
          return false;
        if (!this.device_struct.equals(that.device_struct))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_struct = true && (isSetDevice_struct());
      list.add(present_device_struct);
      if (present_device_struct)
        list.add(device_struct);

      return list.hashCode();
    }

    @Override
    public int compareTo(createdevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_struct()).compareTo(other.isSetDevice_struct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_struct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_struct, other.device_struct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createdevice_args(");
      boolean first = true;

      if (isSetDevice_struct()) {
        sb.append("device_struct:");
        if (this.device_struct == null) {
          sb.append("null");
        } else {
          sb.append(this.device_struct);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (device_struct == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'device_struct' is unset! Struct:" + toString());
      }

    }

    private static class createdevice_argsStandardSchemeFactory implements SchemeFactory {
      public createdevice_argsStandardScheme getScheme() {
        return new createdevice_argsStandardScheme();
      }
    }

    private static class createdevice_argsStandardScheme extends StandardScheme<createdevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createdevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device_struct = new com.Miaoju.device.entity.DeviceStruct();
                struct.device_struct.read(iprot);
                struct.setDevice_structIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createdevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetDevice_struct()) {
          oprot.writeFieldBegin(DEVICE_STRUCT_FIELD_DESC);
          struct.device_struct.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class createdevice_result implements org.apache.thrift.TBase<createdevice_result, createdevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<createdevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createdevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createdevice_resultStandardSchemeFactory());
    }

    private Map<String,com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createdevice_result.class, metaDataMap);
    }

    public createdevice_result() {
    }

    public createdevice_result(
      Map<String,com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createdevice_result(createdevice_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__success_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public createdevice_result deepCopy() {
      return new createdevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public createdevice_result setSuccess(Map<String,com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createdevice_result)
        return this.equals((createdevice_result)that);
      return false;
    }

    public boolean equals(createdevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(createdevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createdevice_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class createdevice_resultStandardSchemeFactory implements SchemeFactory {
      public createdevice_resultStandardScheme getScheme() {
        return new createdevice_resultStandardScheme();
      }
    }

    private static class createdevice_resultStandardScheme extends StandardScheme<createdevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createdevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map6.size);
                  String _key7;
                  com.Miaoju.device.entity.BaseStruct _val8;
                  for (int _i9 = 0; _i9 < _map6.size; ++_i9)
                  {
                    _key7 = iprot.readString();
                    _val8 = new com.Miaoju.device.entity.BaseStruct();
                    _val8.read(iprot);
                    struct.success.put(_key7, _val8);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createdevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize11 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter10 : struct.success.entrySet())

            {
              if (_iter10 != null &&_iter10.getValue() != null ) 
              {
                _isize11++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize11));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter10 : struct.success.entrySet())
            {
              if (_iter10 != null && _iter10.getValue() != null) {
            oprot.writeString(_iter10.getKey());
            _iter10.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updatedevice_args implements org.apache.thrift.TBase<updatedevice_args, updatedevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatedevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatedevice_args");

    private static final org.apache.thrift.protocol.TField DEVICE_STRUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("device_struct", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatedevice_argsStandardSchemeFactory());
    }

    private com.Miaoju.device.entity.DeviceStruct device_struct; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DEVICE_STRUCT((short)1, "device_struct");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DEVICE_STRUCT
            return DEVICE_STRUCT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DEVICE_STRUCT, new org.apache.thrift.meta_data.FieldMetaData("device_struct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.DeviceStruct.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatedevice_args.class, metaDataMap);
    }

    public updatedevice_args() {
    }

    public updatedevice_args(
      com.Miaoju.device.entity.DeviceStruct device_struct)
    {
      this();
      if (device_struct != null ) {
        this.device_struct = device_struct;
        setDevice_structIsSet(true);
      } else {
        setDevice_structIsSet(false);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatedevice_args(updatedevice_args other) {
      if (other.isSetDevice_struct()) {
        this.device_struct = new com.Miaoju.device.entity.DeviceStruct(other.device_struct);
      }
    }

    public updatedevice_args deepCopy() {
      return new updatedevice_args(this);
    }

    @Override
    public void clear() {
      setDevice_structIsSet(false);
      this.device_struct = null;
    }

    public com.Miaoju.device.entity.DeviceStruct getDevice_struct() {
      return this.device_struct;
    }

    public updatedevice_args setDevice_struct(com.Miaoju.device.entity.DeviceStruct device_struct) {
      this.device_struct = device_struct;
      if (device_struct != null) {
        setDevice_structIsSet(true);
      } else {
        unsetDevice_struct();
      }
      return this;
    }

    public void unsetDevice_struct() {
      this.device_struct = null;
    }

    /** Returns true if field device_struct is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice_struct() {
      return this.device_struct != null;
    }

    public void setDevice_structIsSet(boolean value) {
      if (!value) {
        this.device_struct = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DEVICE_STRUCT:
        if (value == null) {
          unsetDevice_struct();
        } else {
          setDevice_struct((com.Miaoju.device.entity.DeviceStruct)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DEVICE_STRUCT:
        if (getDevice_struct() != null) {
          return getDevice_struct();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DEVICE_STRUCT:
        return isSetDevice_struct();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatedevice_args)
        return this.equals((updatedevice_args)that);
      return false;
    }

    public boolean equals(updatedevice_args that) {
      if (that == null)
        return false;

      boolean this_present_device_struct = true && this.isSetDevice_struct();
      boolean that_present_device_struct = true && that.isSetDevice_struct();
      if (this_present_device_struct || that_present_device_struct) {
        if (!(this_present_device_struct && that_present_device_struct))
          return false;
        if (!this.device_struct.equals(that.device_struct))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_device_struct = true && (isSetDevice_struct());
      list.add(present_device_struct);
      if (present_device_struct)
        list.add(device_struct);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatedevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDevice_struct()).compareTo(other.isSetDevice_struct());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDevice_struct()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device_struct, other.device_struct);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatedevice_args(");
      boolean first = true;

      if (isSetDevice_struct()) {
        sb.append("device_struct:");
        if (this.device_struct == null) {
          sb.append("null");
        } else {
          sb.append(this.device_struct);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      if (device_struct == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'device_struct' is unset! Struct:" + toString());
      }

    }

    private static class updatedevice_argsStandardSchemeFactory implements SchemeFactory {
      public updatedevice_argsStandardScheme getScheme() {
        return new updatedevice_argsStandardScheme();
      }
    }

    private static class updatedevice_argsStandardScheme extends StandardScheme<updatedevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatedevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DEVICE_STRUCT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.device_struct = new com.Miaoju.device.entity.DeviceStruct();
                struct.device_struct.read(iprot);
                struct.setDevice_structIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatedevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetDevice_struct()) {
          oprot.writeFieldBegin(DEVICE_STRUCT_FIELD_DESC);
          struct.device_struct.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

  public static class updatedevice_result implements org.apache.thrift.TBase<updatedevice_result, updatedevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatedevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatedevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatedevice_resultStandardSchemeFactory());
    }

    private Map<String,com.Miaoju.device.entity.BaseStruct> success; // default

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.Miaoju.device.entity.BaseStruct.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatedevice_result.class, metaDataMap);
    }

    public updatedevice_result() {
    }

    public updatedevice_result(
      Map<String,com.Miaoju.device.entity.BaseStruct> success)
    {
      this();
      if (success != null ) {
        this.success = success;
        setSuccessIsSet(true);
      }
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatedevice_result(updatedevice_result other) {
      if (other.isSetSuccess()) {
        Map<String,com.Miaoju.device.entity.BaseStruct> __this__success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(other.success.size());
        for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          com.Miaoju.device.entity.BaseStruct other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          com.Miaoju.device.entity.BaseStruct __this__success_copy_value = new com.Miaoju.device.entity.BaseStruct(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public updatedevice_result deepCopy() {
      return new updatedevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, com.Miaoju.device.entity.BaseStruct val) {
      if (this.success == null) {
        this.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>();
      }
      this.success.put(key, val);
    }

    public Map<String,com.Miaoju.device.entity.BaseStruct> getSuccess() {
      return this.success;
    }

    public updatedevice_result setSuccess(Map<String,com.Miaoju.device.entity.BaseStruct> success) {
      this.success = success;
      if (success != null) {
        setSuccessIsSet(true);
      } else {
        unsetSuccess();
      }
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,com.Miaoju.device.entity.BaseStruct>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        if (getSuccess() != null) {
          return getSuccess();

        }
        return null;
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatedevice_result)
        return this.equals((updatedevice_result)that);
      return false;
    }

    public boolean equals(updatedevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updatedevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatedevice_result(");
      boolean first = true;

      if (isSetSuccess()) {
        sb.append("success:");
        if (this.success == null) {
          sb.append("null");
        } else {
          sb.append(this.success);
        }
        first = false;
      }
      sb.append(")");
      return sb.toString();
    }

    // check for args
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private static class updatedevice_resultStandardSchemeFactory implements SchemeFactory {
      public updatedevice_resultStandardScheme getScheme() {
        return new updatedevice_resultStandardScheme();
      }
    }

    private static class updatedevice_resultStandardScheme extends StandardScheme<updatedevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatedevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map12 = iprot.readMapBegin();
                  struct.success = new HashMap<String,com.Miaoju.device.entity.BaseStruct>(2*_map12.size);
                  String _key13;
                  com.Miaoju.device.entity.BaseStruct _val14;
                  for (int _i15 = 0; _i15 < _map12.size; ++_i15)
                  {
                    _key13 = iprot.readString();
                    _val14 = new com.Miaoju.device.entity.BaseStruct();
                    _val14.read(iprot);
                    struct.success.put(_key13, _val14);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatedevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            int _isize17 = 0;
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter16 : struct.success.entrySet())

            {
              if (_iter16 != null &&_iter16.getValue() != null ) 
              {
                _isize17++;
              }
            }
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _isize17));
            for (Map.Entry<String, com.Miaoju.device.entity.BaseStruct> _iter16 : struct.success.entrySet())
            {
              if (_iter16 != null && _iter16.getValue() != null) {
            oprot.writeString(_iter16.getKey());
            _iter16.getValue().write(oprot);
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

  }

}
