/**
 * Autogenerated by Thrift Compiler (0.9.2)-v1.0.1
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * THIS IS MODIFIED FOR ZAN GROUP, ANY PROBLEM PLS CONTACT Zan Group<zan@zanphp.io>
 * @generated
 */
package com.miaoju.device.entity;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)-v1.0.1", date = "2018-4-18")
public class DeviceStruct implements org.apache.thrift.TBase<DeviceStruct, DeviceStruct._Fields>, java.io.Serializable, Cloneable, Comparable<DeviceStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeviceStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENTITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entity_id", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_EN_FIELD_DESC = new org.apache.thrift.protocol.TField("name_en", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ICON_FIELD_DESC = new org.apache.thrift.protocol.TField("icon", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OS_FIELD_DESC = new org.apache.thrift.protocol.TField("os", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField COMMON_SIGN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("common_sign_key", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CONFIRM_SIGN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("confirm_sign_key", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PAY_SIGN_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("pay_sign_key", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField PAY_CALLBACK_FIELD_DESC = new org.apache.thrift.protocol.TField("pay_callback", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField COIN_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("coin_unit", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField COIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("coin_rate", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField UCODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ucode", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField PACKAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("package_url", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("create_time", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("update_time", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CREATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("create_by", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField UPDATE_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("update_by", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField DISCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("discount", org.apache.thrift.protocol.TType.DOUBLE, (short)23);
  private static final org.apache.thrift.protocol.TField BACK_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("back_pay", org.apache.thrift.protocol.TType.DOUBLE, (short)24);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeviceStructStandardSchemeFactory());
  }

  private Integer id; // optional
  private Integer entity_id; // optional
  private String name; // optional
  private String name_en; // optional
  private String icon; // optional
  private String desc; // optional
  private String category; // optional
  private String rank; // optional
  private Integer os; // optional
  private String common_sign_key; // optional
  private String confirm_sign_key; // optional
  private String pay_sign_key; // optional
  private String pay_callback; // optional
  private String coin_unit; // optional
  private Integer coin_rate; // optional
  private Integer ucode; // optional
  private String version; // optional
  private String package_url; // optional
  private Integer create_time; // optional
  private Integer update_time; // optional
  private String create_by; // optional
  private String update_by; // optional
  private Double discount; // optional
  private Double back_pay; // optional
  private Integer status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ENTITY_ID((short)2, "entity_id"),
    NAME((short)3, "name"),
    NAME_EN((short)4, "name_en"),
    ICON((short)5, "icon"),
    DESC((short)6, "desc"),
    CATEGORY((short)7, "category"),
    RANK((short)8, "rank"),
    OS((short)9, "os"),
    COMMON_SIGN_KEY((short)10, "common_sign_key"),
    CONFIRM_SIGN_KEY((short)11, "confirm_sign_key"),
    PAY_SIGN_KEY((short)12, "pay_sign_key"),
    PAY_CALLBACK((short)13, "pay_callback"),
    COIN_UNIT((short)14, "coin_unit"),
    COIN_RATE((short)15, "coin_rate"),
    UCODE((short)16, "ucode"),
    VERSION((short)17, "version"),
    PACKAGE_URL((short)18, "package_url"),
    CREATE_TIME((short)19, "create_time"),
    UPDATE_TIME((short)20, "update_time"),
    CREATE_BY((short)21, "create_by"),
    UPDATE_BY((short)22, "update_by"),
    DISCOUNT((short)23, "discount"),
    BACK_PAY((short)24, "back_pay"),
    STATUS((short)25, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ENTITY_ID
          return ENTITY_ID;
        case 3: // NAME
          return NAME;
        case 4: // NAME_EN
          return NAME_EN;
        case 5: // ICON
          return ICON;
        case 6: // DESC
          return DESC;
        case 7: // CATEGORY
          return CATEGORY;
        case 8: // RANK
          return RANK;
        case 9: // OS
          return OS;
        case 10: // COMMON_SIGN_KEY
          return COMMON_SIGN_KEY;
        case 11: // CONFIRM_SIGN_KEY
          return CONFIRM_SIGN_KEY;
        case 12: // PAY_SIGN_KEY
          return PAY_SIGN_KEY;
        case 13: // PAY_CALLBACK
          return PAY_CALLBACK;
        case 14: // COIN_UNIT
          return COIN_UNIT;
        case 15: // COIN_RATE
          return COIN_RATE;
        case 16: // UCODE
          return UCODE;
        case 17: // VERSION
          return VERSION;
        case 18: // PACKAGE_URL
          return PACKAGE_URL;
        case 19: // CREATE_TIME
          return CREATE_TIME;
        case 20: // UPDATE_TIME
          return UPDATE_TIME;
        case 21: // CREATE_BY
          return CREATE_BY;
        case 22: // UPDATE_BY
          return UPDATE_BY;
        case 23: // DISCOUNT
          return DISCOUNT;
        case 24: // BACK_PAY
          return BACK_PAY;
        case 25: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ENTITY_ID_ISSET_ID = 1;
  private static final int __OS_ISSET_ID = 2;
  private static final int __COIN_RATE_ISSET_ID = 3;
  private static final int __UCODE_ISSET_ID = 4;
  private static final int __CREATE_TIME_ISSET_ID = 5;
  private static final int __UPDATE_TIME_ISSET_ID = 6;
  private static final int __DISCOUNT_ISSET_ID = 7;
  private static final int __BACK_PAY_ISSET_ID = 8;
  private static final int __STATUS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ID,_Fields.ENTITY_ID,_Fields.NAME,_Fields.NAME_EN,_Fields.ICON,_Fields.DESC,_Fields.CATEGORY,_Fields.RANK,_Fields.OS,_Fields.COMMON_SIGN_KEY,_Fields.CONFIRM_SIGN_KEY,_Fields.PAY_SIGN_KEY,_Fields.PAY_CALLBACK,_Fields.COIN_UNIT,_Fields.COIN_RATE,_Fields.UCODE,_Fields.VERSION,_Fields.PACKAGE_URL,_Fields.CREATE_TIME,_Fields.UPDATE_TIME,_Fields.CREATE_BY,_Fields.UPDATE_BY,_Fields.DISCOUNT,_Fields.BACK_PAY,_Fields.STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENTITY_ID, new org.apache.thrift.meta_data.FieldMetaData("entity_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME_EN, new org.apache.thrift.meta_data.FieldMetaData("name_en", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ICON, new org.apache.thrift.meta_data.FieldMetaData("icon", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS, new org.apache.thrift.meta_data.FieldMetaData("os", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMON_SIGN_KEY, new org.apache.thrift.meta_data.FieldMetaData("common_sign_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIRM_SIGN_KEY, new org.apache.thrift.meta_data.FieldMetaData("confirm_sign_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_SIGN_KEY, new org.apache.thrift.meta_data.FieldMetaData("pay_sign_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_CALLBACK, new org.apache.thrift.meta_data.FieldMetaData("pay_callback", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COIN_UNIT, new org.apache.thrift.meta_data.FieldMetaData("coin_unit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("coin_rate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UCODE, new org.apache.thrift.meta_data.FieldMetaData("ucode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PACKAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("package_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("create_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("update_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_BY, new org.apache.thrift.meta_data.FieldMetaData("create_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_BY, new org.apache.thrift.meta_data.FieldMetaData("update_by", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISCOUNT, new org.apache.thrift.meta_data.FieldMetaData("discount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BACK_PAY, new org.apache.thrift.meta_data.FieldMetaData("back_pay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceStruct.class, metaDataMap);
  }

  public DeviceStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeviceStruct(DeviceStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.entity_id = other.entity_id;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetName_en()) {
      this.name_en = other.name_en;
    }
    if (other.isSetIcon()) {
      this.icon = other.icon;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetRank()) {
      this.rank = other.rank;
    }
    this.os = other.os;
    if (other.isSetCommon_sign_key()) {
      this.common_sign_key = other.common_sign_key;
    }
    if (other.isSetConfirm_sign_key()) {
      this.confirm_sign_key = other.confirm_sign_key;
    }
    if (other.isSetPay_sign_key()) {
      this.pay_sign_key = other.pay_sign_key;
    }
    if (other.isSetPay_callback()) {
      this.pay_callback = other.pay_callback;
    }
    if (other.isSetCoin_unit()) {
      this.coin_unit = other.coin_unit;
    }
    this.coin_rate = other.coin_rate;
    this.ucode = other.ucode;
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetPackage_url()) {
      this.package_url = other.package_url;
    }
    this.create_time = other.create_time;
    this.update_time = other.update_time;
    if (other.isSetCreate_by()) {
      this.create_by = other.create_by;
    }
    if (other.isSetUpdate_by()) {
      this.update_by = other.update_by;
    }
    this.discount = other.discount;
    this.back_pay = other.back_pay;
    this.status = other.status;
  }

  public DeviceStruct deepCopy() {
    return new DeviceStruct(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = null;
    setEntity_idIsSet(false);
    this.entity_id = null;
    setNameIsSet(false);
    this.name = null;
    setName_enIsSet(false);
    this.name_en = null;
    setIconIsSet(false);
    this.icon = null;
    setDescIsSet(false);
    this.desc = null;
    setCategoryIsSet(false);
    this.category = null;
    setRankIsSet(false);
    this.rank = null;
    setOsIsSet(false);
    this.os = null;
    setCommon_sign_keyIsSet(false);
    this.common_sign_key = null;
    setConfirm_sign_keyIsSet(false);
    this.confirm_sign_key = null;
    setPay_sign_keyIsSet(false);
    this.pay_sign_key = null;
    setPay_callbackIsSet(false);
    this.pay_callback = null;
    setCoin_unitIsSet(false);
    this.coin_unit = null;
    setCoin_rateIsSet(false);
    this.coin_rate = null;
    setUcodeIsSet(false);
    this.ucode = null;
    setVersionIsSet(false);
    this.version = null;
    setPackage_urlIsSet(false);
    this.package_url = null;
    setCreate_timeIsSet(false);
    this.create_time = null;
    setUpdate_timeIsSet(false);
    this.update_time = null;
    setCreate_byIsSet(false);
    this.create_by = null;
    setUpdate_byIsSet(false);
    this.update_by = null;
    setDiscountIsSet(false);
    this.discount = null;
    setBack_payIsSet(false);
    this.back_pay = null;
    setStatusIsSet(false);
    this.status = null;
  }

  public Integer getId() {
    return this.id;
  }

  public DeviceStruct setId(Integer id) {
    this.id = id;
    if (id != null) {
      setIdIsSet(true);
    } else {
      unsetId();
    }
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public Integer getEntity_id() {
    return this.entity_id;
  }

  public DeviceStruct setEntity_id(Integer entity_id) {
    this.entity_id = entity_id;
    if (entity_id != null) {
      setEntity_idIsSet(true);
    } else {
      unsetEntity_id();
    }
    return this;
  }

  public void unsetEntity_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTITY_ID_ISSET_ID);
  }

  /** Returns true if field entity_id is set (has been assigned a value) and false otherwise */
  public boolean isSetEntity_id() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTITY_ID_ISSET_ID);
  }

  public void setEntity_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTITY_ID_ISSET_ID, value);
  }

  public String getName() {
    return this.name;
  }

  public DeviceStruct setName(String name) {
    this.name = name;
    if (name != null) {
      setNameIsSet(true);
    } else {
      unsetName();
    }
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getName_en() {
    return this.name_en;
  }

  public DeviceStruct setName_en(String name_en) {
    this.name_en = name_en;
    if (name_en != null) {
      setName_enIsSet(true);
    } else {
      unsetName_en();
    }
    return this;
  }

  public void unsetName_en() {
    this.name_en = null;
  }

  /** Returns true if field name_en is set (has been assigned a value) and false otherwise */
  public boolean isSetName_en() {
    return this.name_en != null;
  }

  public void setName_enIsSet(boolean value) {
    if (!value) {
      this.name_en = null;
    }
  }

  public String getIcon() {
    return this.icon;
  }

  public DeviceStruct setIcon(String icon) {
    this.icon = icon;
    if (icon != null) {
      setIconIsSet(true);
    } else {
      unsetIcon();
    }
    return this;
  }

  public void unsetIcon() {
    this.icon = null;
  }

  /** Returns true if field icon is set (has been assigned a value) and false otherwise */
  public boolean isSetIcon() {
    return this.icon != null;
  }

  public void setIconIsSet(boolean value) {
    if (!value) {
      this.icon = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public DeviceStruct setDesc(String desc) {
    this.desc = desc;
    if (desc != null) {
      setDescIsSet(true);
    } else {
      unsetDesc();
    }
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getCategory() {
    return this.category;
  }

  public DeviceStruct setCategory(String category) {
    this.category = category;
    if (category != null) {
      setCategoryIsSet(true);
    } else {
      unsetCategory();
    }
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getRank() {
    return this.rank;
  }

  public DeviceStruct setRank(String rank) {
    this.rank = rank;
    if (rank != null) {
      setRankIsSet(true);
    } else {
      unsetRank();
    }
    return this;
  }

  public void unsetRank() {
    this.rank = null;
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return this.rank != null;
  }

  public void setRankIsSet(boolean value) {
    if (!value) {
      this.rank = null;
    }
  }

  public Integer getOs() {
    return this.os;
  }

  public DeviceStruct setOs(Integer os) {
    this.os = os;
    if (os != null) {
      setOsIsSet(true);
    } else {
      unsetOs();
    }
    return this;
  }

  public void unsetOs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OS_ISSET_ID);
  }

  /** Returns true if field os is set (has been assigned a value) and false otherwise */
  public boolean isSetOs() {
    return EncodingUtils.testBit(__isset_bitfield, __OS_ISSET_ID);
  }

  public void setOsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OS_ISSET_ID, value);
  }

  public String getCommon_sign_key() {
    return this.common_sign_key;
  }

  public DeviceStruct setCommon_sign_key(String common_sign_key) {
    this.common_sign_key = common_sign_key;
    if (common_sign_key != null) {
      setCommon_sign_keyIsSet(true);
    } else {
      unsetCommon_sign_key();
    }
    return this;
  }

  public void unsetCommon_sign_key() {
    this.common_sign_key = null;
  }

  /** Returns true if field common_sign_key is set (has been assigned a value) and false otherwise */
  public boolean isSetCommon_sign_key() {
    return this.common_sign_key != null;
  }

  public void setCommon_sign_keyIsSet(boolean value) {
    if (!value) {
      this.common_sign_key = null;
    }
  }

  public String getConfirm_sign_key() {
    return this.confirm_sign_key;
  }

  public DeviceStruct setConfirm_sign_key(String confirm_sign_key) {
    this.confirm_sign_key = confirm_sign_key;
    if (confirm_sign_key != null) {
      setConfirm_sign_keyIsSet(true);
    } else {
      unsetConfirm_sign_key();
    }
    return this;
  }

  public void unsetConfirm_sign_key() {
    this.confirm_sign_key = null;
  }

  /** Returns true if field confirm_sign_key is set (has been assigned a value) and false otherwise */
  public boolean isSetConfirm_sign_key() {
    return this.confirm_sign_key != null;
  }

  public void setConfirm_sign_keyIsSet(boolean value) {
    if (!value) {
      this.confirm_sign_key = null;
    }
  }

  public String getPay_sign_key() {
    return this.pay_sign_key;
  }

  public DeviceStruct setPay_sign_key(String pay_sign_key) {
    this.pay_sign_key = pay_sign_key;
    if (pay_sign_key != null) {
      setPay_sign_keyIsSet(true);
    } else {
      unsetPay_sign_key();
    }
    return this;
  }

  public void unsetPay_sign_key() {
    this.pay_sign_key = null;
  }

  /** Returns true if field pay_sign_key is set (has been assigned a value) and false otherwise */
  public boolean isSetPay_sign_key() {
    return this.pay_sign_key != null;
  }

  public void setPay_sign_keyIsSet(boolean value) {
    if (!value) {
      this.pay_sign_key = null;
    }
  }

  public String getPay_callback() {
    return this.pay_callback;
  }

  public DeviceStruct setPay_callback(String pay_callback) {
    this.pay_callback = pay_callback;
    if (pay_callback != null) {
      setPay_callbackIsSet(true);
    } else {
      unsetPay_callback();
    }
    return this;
  }

  public void unsetPay_callback() {
    this.pay_callback = null;
  }

  /** Returns true if field pay_callback is set (has been assigned a value) and false otherwise */
  public boolean isSetPay_callback() {
    return this.pay_callback != null;
  }

  public void setPay_callbackIsSet(boolean value) {
    if (!value) {
      this.pay_callback = null;
    }
  }

  public String getCoin_unit() {
    return this.coin_unit;
  }

  public DeviceStruct setCoin_unit(String coin_unit) {
    this.coin_unit = coin_unit;
    if (coin_unit != null) {
      setCoin_unitIsSet(true);
    } else {
      unsetCoin_unit();
    }
    return this;
  }

  public void unsetCoin_unit() {
    this.coin_unit = null;
  }

  /** Returns true if field coin_unit is set (has been assigned a value) and false otherwise */
  public boolean isSetCoin_unit() {
    return this.coin_unit != null;
  }

  public void setCoin_unitIsSet(boolean value) {
    if (!value) {
      this.coin_unit = null;
    }
  }

  public Integer getCoin_rate() {
    return this.coin_rate;
  }

  public DeviceStruct setCoin_rate(Integer coin_rate) {
    this.coin_rate = coin_rate;
    if (coin_rate != null) {
      setCoin_rateIsSet(true);
    } else {
      unsetCoin_rate();
    }
    return this;
  }

  public void unsetCoin_rate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COIN_RATE_ISSET_ID);
  }

  /** Returns true if field coin_rate is set (has been assigned a value) and false otherwise */
  public boolean isSetCoin_rate() {
    return EncodingUtils.testBit(__isset_bitfield, __COIN_RATE_ISSET_ID);
  }

  public void setCoin_rateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COIN_RATE_ISSET_ID, value);
  }

  public Integer getUcode() {
    return this.ucode;
  }

  public DeviceStruct setUcode(Integer ucode) {
    this.ucode = ucode;
    if (ucode != null) {
      setUcodeIsSet(true);
    } else {
      unsetUcode();
    }
    return this;
  }

  public void unsetUcode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UCODE_ISSET_ID);
  }

  /** Returns true if field ucode is set (has been assigned a value) and false otherwise */
  public boolean isSetUcode() {
    return EncodingUtils.testBit(__isset_bitfield, __UCODE_ISSET_ID);
  }

  public void setUcodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UCODE_ISSET_ID, value);
  }

  public String getVersion() {
    return this.version;
  }

  public DeviceStruct setVersion(String version) {
    this.version = version;
    if (version != null) {
      setVersionIsSet(true);
    } else {
      unsetVersion();
    }
    return this;
  }

  public void unsetVersion() {
    this.version = null;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getPackage_url() {
    return this.package_url;
  }

  public DeviceStruct setPackage_url(String package_url) {
    this.package_url = package_url;
    if (package_url != null) {
      setPackage_urlIsSet(true);
    } else {
      unsetPackage_url();
    }
    return this;
  }

  public void unsetPackage_url() {
    this.package_url = null;
  }

  /** Returns true if field package_url is set (has been assigned a value) and false otherwise */
  public boolean isSetPackage_url() {
    return this.package_url != null;
  }

  public void setPackage_urlIsSet(boolean value) {
    if (!value) {
      this.package_url = null;
    }
  }

  public Integer getCreate_time() {
    return this.create_time;
  }

  public DeviceStruct setCreate_time(Integer create_time) {
    this.create_time = create_time;
    if (create_time != null) {
      setCreate_timeIsSet(true);
    } else {
      unsetCreate_time();
    }
    return this;
  }

  public void unsetCreate_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  /** Returns true if field create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_time() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATE_TIME_ISSET_ID);
  }

  public void setCreate_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATE_TIME_ISSET_ID, value);
  }

  public Integer getUpdate_time() {
    return this.update_time;
  }

  public DeviceStruct setUpdate_time(Integer update_time) {
    this.update_time = update_time;
    if (update_time != null) {
      setUpdate_timeIsSet(true);
    } else {
      unsetUpdate_time();
    }
    return this;
  }

  public void unsetUpdate_time() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  /** Returns true if field update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_time() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID);
  }

  public void setUpdate_timeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATE_TIME_ISSET_ID, value);
  }

  public String getCreate_by() {
    return this.create_by;
  }

  public DeviceStruct setCreate_by(String create_by) {
    this.create_by = create_by;
    if (create_by != null) {
      setCreate_byIsSet(true);
    } else {
      unsetCreate_by();
    }
    return this;
  }

  public void unsetCreate_by() {
    this.create_by = null;
  }

  /** Returns true if field create_by is set (has been assigned a value) and false otherwise */
  public boolean isSetCreate_by() {
    return this.create_by != null;
  }

  public void setCreate_byIsSet(boolean value) {
    if (!value) {
      this.create_by = null;
    }
  }

  public String getUpdate_by() {
    return this.update_by;
  }

  public DeviceStruct setUpdate_by(String update_by) {
    this.update_by = update_by;
    if (update_by != null) {
      setUpdate_byIsSet(true);
    } else {
      unsetUpdate_by();
    }
    return this;
  }

  public void unsetUpdate_by() {
    this.update_by = null;
  }

  /** Returns true if field update_by is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdate_by() {
    return this.update_by != null;
  }

  public void setUpdate_byIsSet(boolean value) {
    if (!value) {
      this.update_by = null;
    }
  }

  public Double getDiscount() {
    return this.discount;
  }

  public DeviceStruct setDiscount(Double discount) {
    this.discount = discount;
    if (discount != null) {
      setDiscountIsSet(true);
    } else {
      unsetDiscount();
    }
    return this;
  }

  public void unsetDiscount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  /** Returns true if field discount is set (has been assigned a value) and false otherwise */
  public boolean isSetDiscount() {
    return EncodingUtils.testBit(__isset_bitfield, __DISCOUNT_ISSET_ID);
  }

  public void setDiscountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISCOUNT_ISSET_ID, value);
  }

  public Double getBack_pay() {
    return this.back_pay;
  }

  public DeviceStruct setBack_pay(Double back_pay) {
    this.back_pay = back_pay;
    if (back_pay != null) {
      setBack_payIsSet(true);
    } else {
      unsetBack_pay();
    }
    return this;
  }

  public void unsetBack_pay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BACK_PAY_ISSET_ID);
  }

  /** Returns true if field back_pay is set (has been assigned a value) and false otherwise */
  public boolean isSetBack_pay() {
    return EncodingUtils.testBit(__isset_bitfield, __BACK_PAY_ISSET_ID);
  }

  public void setBack_payIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BACK_PAY_ISSET_ID, value);
  }

  public Integer getStatus() {
    return this.status;
  }

  public DeviceStruct setStatus(Integer status) {
    this.status = status;
    if (status != null) {
      setStatusIsSet(true);
    } else {
      unsetStatus();
    }
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case ENTITY_ID:
      if (value == null) {
        unsetEntity_id();
      } else {
        setEntity_id((Integer)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case NAME_EN:
      if (value == null) {
        unsetName_en();
      } else {
        setName_en((String)value);
      }
      break;

    case ICON:
      if (value == null) {
        unsetIcon();
      } else {
        setIcon((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((String)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((String)value);
      }
      break;

    case OS:
      if (value == null) {
        unsetOs();
      } else {
        setOs((Integer)value);
      }
      break;

    case COMMON_SIGN_KEY:
      if (value == null) {
        unsetCommon_sign_key();
      } else {
        setCommon_sign_key((String)value);
      }
      break;

    case CONFIRM_SIGN_KEY:
      if (value == null) {
        unsetConfirm_sign_key();
      } else {
        setConfirm_sign_key((String)value);
      }
      break;

    case PAY_SIGN_KEY:
      if (value == null) {
        unsetPay_sign_key();
      } else {
        setPay_sign_key((String)value);
      }
      break;

    case PAY_CALLBACK:
      if (value == null) {
        unsetPay_callback();
      } else {
        setPay_callback((String)value);
      }
      break;

    case COIN_UNIT:
      if (value == null) {
        unsetCoin_unit();
      } else {
        setCoin_unit((String)value);
      }
      break;

    case COIN_RATE:
      if (value == null) {
        unsetCoin_rate();
      } else {
        setCoin_rate((Integer)value);
      }
      break;

    case UCODE:
      if (value == null) {
        unsetUcode();
      } else {
        setUcode((Integer)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case PACKAGE_URL:
      if (value == null) {
        unsetPackage_url();
      } else {
        setPackage_url((String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreate_time();
      } else {
        setCreate_time((Integer)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdate_time();
      } else {
        setUpdate_time((Integer)value);
      }
      break;

    case CREATE_BY:
      if (value == null) {
        unsetCreate_by();
      } else {
        setCreate_by((String)value);
      }
      break;

    case UPDATE_BY:
      if (value == null) {
        unsetUpdate_by();
      } else {
        setUpdate_by((String)value);
      }
      break;

    case DISCOUNT:
      if (value == null) {
        unsetDiscount();
      } else {
        setDiscount((Double)value);
      }
      break;

    case BACK_PAY:
      if (value == null) {
        unsetBack_pay();
      } else {
        setBack_pay((Double)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      if (getId() != null) {
        return Integer.valueOf(getId());
      }
      return null;
    case ENTITY_ID:
      if (getEntity_id() != null) {
        return Integer.valueOf(getEntity_id());
      }
      return null;
    case NAME:
      if (getName() != null) {
        return getName();

      }
      return null;
    case NAME_EN:
      if (getName_en() != null) {
        return getName_en();

      }
      return null;
    case ICON:
      if (getIcon() != null) {
        return getIcon();

      }
      return null;
    case DESC:
      if (getDesc() != null) {
        return getDesc();

      }
      return null;
    case CATEGORY:
      if (getCategory() != null) {
        return getCategory();

      }
      return null;
    case RANK:
      if (getRank() != null) {
        return getRank();

      }
      return null;
    case OS:
      if (getOs() != null) {
        return Integer.valueOf(getOs());
      }
      return null;
    case COMMON_SIGN_KEY:
      if (getCommon_sign_key() != null) {
        return getCommon_sign_key();

      }
      return null;
    case CONFIRM_SIGN_KEY:
      if (getConfirm_sign_key() != null) {
        return getConfirm_sign_key();

      }
      return null;
    case PAY_SIGN_KEY:
      if (getPay_sign_key() != null) {
        return getPay_sign_key();

      }
      return null;
    case PAY_CALLBACK:
      if (getPay_callback() != null) {
        return getPay_callback();

      }
      return null;
    case COIN_UNIT:
      if (getCoin_unit() != null) {
        return getCoin_unit();

      }
      return null;
    case COIN_RATE:
      if (getCoin_rate() != null) {
        return Integer.valueOf(getCoin_rate());
      }
      return null;
    case UCODE:
      if (getUcode() != null) {
        return Integer.valueOf(getUcode());
      }
      return null;
    case VERSION:
      if (getVersion() != null) {
        return getVersion();

      }
      return null;
    case PACKAGE_URL:
      if (getPackage_url() != null) {
        return getPackage_url();

      }
      return null;
    case CREATE_TIME:
      if (getCreate_time() != null) {
        return Integer.valueOf(getCreate_time());
      }
      return null;
    case UPDATE_TIME:
      if (getUpdate_time() != null) {
        return Integer.valueOf(getUpdate_time());
      }
      return null;
    case CREATE_BY:
      if (getCreate_by() != null) {
        return getCreate_by();

      }
      return null;
    case UPDATE_BY:
      if (getUpdate_by() != null) {
        return getUpdate_by();

      }
      return null;
    case DISCOUNT:
      if (getDiscount() != null) {
        return Double.valueOf(getDiscount());
      }
      return null;
    case BACK_PAY:
      if (getBack_pay() != null) {
        return Double.valueOf(getBack_pay());
      }
      return null;
    case STATUS:
      if (getStatus() != null) {
        return Integer.valueOf(getStatus());
      }
      return null;
    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ENTITY_ID:
      return isSetEntity_id();
    case NAME:
      return isSetName();
    case NAME_EN:
      return isSetName_en();
    case ICON:
      return isSetIcon();
    case DESC:
      return isSetDesc();
    case CATEGORY:
      return isSetCategory();
    case RANK:
      return isSetRank();
    case OS:
      return isSetOs();
    case COMMON_SIGN_KEY:
      return isSetCommon_sign_key();
    case CONFIRM_SIGN_KEY:
      return isSetConfirm_sign_key();
    case PAY_SIGN_KEY:
      return isSetPay_sign_key();
    case PAY_CALLBACK:
      return isSetPay_callback();
    case COIN_UNIT:
      return isSetCoin_unit();
    case COIN_RATE:
      return isSetCoin_rate();
    case UCODE:
      return isSetUcode();
    case VERSION:
      return isSetVersion();
    case PACKAGE_URL:
      return isSetPackage_url();
    case CREATE_TIME:
      return isSetCreate_time();
    case UPDATE_TIME:
      return isSetUpdate_time();
    case CREATE_BY:
      return isSetCreate_by();
    case UPDATE_BY:
      return isSetUpdate_by();
    case DISCOUNT:
      return isSetDiscount();
    case BACK_PAY:
      return isSetBack_pay();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeviceStruct)
      return this.equals((DeviceStruct)that);
    return false;
  }

  public boolean equals(DeviceStruct that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_entity_id = true && this.isSetEntity_id();
    boolean that_present_entity_id = true && that.isSetEntity_id();
    if (this_present_entity_id || that_present_entity_id) {
      if (!(this_present_entity_id && that_present_entity_id))
        return false;
      if (!this.entity_id.equals(that.entity_id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_name_en = true && this.isSetName_en();
    boolean that_present_name_en = true && that.isSetName_en();
    if (this_present_name_en || that_present_name_en) {
      if (!(this_present_name_en && that_present_name_en))
        return false;
      if (!this.name_en.equals(that.name_en))
        return false;
    }

    boolean this_present_icon = true && this.isSetIcon();
    boolean that_present_icon = true && that.isSetIcon();
    if (this_present_icon || that_present_icon) {
      if (!(this_present_icon && that_present_icon))
        return false;
      if (!this.icon.equals(that.icon))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_rank = true && this.isSetRank();
    boolean that_present_rank = true && that.isSetRank();
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (!this.rank.equals(that.rank))
        return false;
    }

    boolean this_present_os = true && this.isSetOs();
    boolean that_present_os = true && that.isSetOs();
    if (this_present_os || that_present_os) {
      if (!(this_present_os && that_present_os))
        return false;
      if (!this.os.equals(that.os))
        return false;
    }

    boolean this_present_common_sign_key = true && this.isSetCommon_sign_key();
    boolean that_present_common_sign_key = true && that.isSetCommon_sign_key();
    if (this_present_common_sign_key || that_present_common_sign_key) {
      if (!(this_present_common_sign_key && that_present_common_sign_key))
        return false;
      if (!this.common_sign_key.equals(that.common_sign_key))
        return false;
    }

    boolean this_present_confirm_sign_key = true && this.isSetConfirm_sign_key();
    boolean that_present_confirm_sign_key = true && that.isSetConfirm_sign_key();
    if (this_present_confirm_sign_key || that_present_confirm_sign_key) {
      if (!(this_present_confirm_sign_key && that_present_confirm_sign_key))
        return false;
      if (!this.confirm_sign_key.equals(that.confirm_sign_key))
        return false;
    }

    boolean this_present_pay_sign_key = true && this.isSetPay_sign_key();
    boolean that_present_pay_sign_key = true && that.isSetPay_sign_key();
    if (this_present_pay_sign_key || that_present_pay_sign_key) {
      if (!(this_present_pay_sign_key && that_present_pay_sign_key))
        return false;
      if (!this.pay_sign_key.equals(that.pay_sign_key))
        return false;
    }

    boolean this_present_pay_callback = true && this.isSetPay_callback();
    boolean that_present_pay_callback = true && that.isSetPay_callback();
    if (this_present_pay_callback || that_present_pay_callback) {
      if (!(this_present_pay_callback && that_present_pay_callback))
        return false;
      if (!this.pay_callback.equals(that.pay_callback))
        return false;
    }

    boolean this_present_coin_unit = true && this.isSetCoin_unit();
    boolean that_present_coin_unit = true && that.isSetCoin_unit();
    if (this_present_coin_unit || that_present_coin_unit) {
      if (!(this_present_coin_unit && that_present_coin_unit))
        return false;
      if (!this.coin_unit.equals(that.coin_unit))
        return false;
    }

    boolean this_present_coin_rate = true && this.isSetCoin_rate();
    boolean that_present_coin_rate = true && that.isSetCoin_rate();
    if (this_present_coin_rate || that_present_coin_rate) {
      if (!(this_present_coin_rate && that_present_coin_rate))
        return false;
      if (!this.coin_rate.equals(that.coin_rate))
        return false;
    }

    boolean this_present_ucode = true && this.isSetUcode();
    boolean that_present_ucode = true && that.isSetUcode();
    if (this_present_ucode || that_present_ucode) {
      if (!(this_present_ucode && that_present_ucode))
        return false;
      if (!this.ucode.equals(that.ucode))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_package_url = true && this.isSetPackage_url();
    boolean that_present_package_url = true && that.isSetPackage_url();
    if (this_present_package_url || that_present_package_url) {
      if (!(this_present_package_url && that_present_package_url))
        return false;
      if (!this.package_url.equals(that.package_url))
        return false;
    }

    boolean this_present_create_time = true && this.isSetCreate_time();
    boolean that_present_create_time = true && that.isSetCreate_time();
    if (this_present_create_time || that_present_create_time) {
      if (!(this_present_create_time && that_present_create_time))
        return false;
      if (!this.create_time.equals(that.create_time))
        return false;
    }

    boolean this_present_update_time = true && this.isSetUpdate_time();
    boolean that_present_update_time = true && that.isSetUpdate_time();
    if (this_present_update_time || that_present_update_time) {
      if (!(this_present_update_time && that_present_update_time))
        return false;
      if (!this.update_time.equals(that.update_time))
        return false;
    }

    boolean this_present_create_by = true && this.isSetCreate_by();
    boolean that_present_create_by = true && that.isSetCreate_by();
    if (this_present_create_by || that_present_create_by) {
      if (!(this_present_create_by && that_present_create_by))
        return false;
      if (!this.create_by.equals(that.create_by))
        return false;
    }

    boolean this_present_update_by = true && this.isSetUpdate_by();
    boolean that_present_update_by = true && that.isSetUpdate_by();
    if (this_present_update_by || that_present_update_by) {
      if (!(this_present_update_by && that_present_update_by))
        return false;
      if (!this.update_by.equals(that.update_by))
        return false;
    }

    boolean this_present_discount = true && this.isSetDiscount();
    boolean that_present_discount = true && that.isSetDiscount();
    if (this_present_discount || that_present_discount) {
      if (!(this_present_discount && that_present_discount))
        return false;
      if (!this.discount.equals(that.discount))
        return false;
    }

    boolean this_present_back_pay = true && this.isSetBack_pay();
    boolean that_present_back_pay = true && that.isSetBack_pay();
    if (this_present_back_pay || that_present_back_pay) {
      if (!(this_present_back_pay && that_present_back_pay))
        return false;
      if (!this.back_pay.equals(that.back_pay))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_entity_id = true && (isSetEntity_id());
    list.add(present_entity_id);
    if (present_entity_id)
      list.add(entity_id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_name_en = true && (isSetName_en());
    list.add(present_name_en);
    if (present_name_en)
      list.add(name_en);

    boolean present_icon = true && (isSetIcon());
    list.add(present_icon);
    if (present_icon)
      list.add(icon);

    boolean present_desc = true && (isSetDesc());
    list.add(present_desc);
    if (present_desc)
      list.add(desc);

    boolean present_category = true && (isSetCategory());
    list.add(present_category);
    if (present_category)
      list.add(category);

    boolean present_rank = true && (isSetRank());
    list.add(present_rank);
    if (present_rank)
      list.add(rank);

    boolean present_os = true && (isSetOs());
    list.add(present_os);
    if (present_os)
      list.add(os);

    boolean present_common_sign_key = true && (isSetCommon_sign_key());
    list.add(present_common_sign_key);
    if (present_common_sign_key)
      list.add(common_sign_key);

    boolean present_confirm_sign_key = true && (isSetConfirm_sign_key());
    list.add(present_confirm_sign_key);
    if (present_confirm_sign_key)
      list.add(confirm_sign_key);

    boolean present_pay_sign_key = true && (isSetPay_sign_key());
    list.add(present_pay_sign_key);
    if (present_pay_sign_key)
      list.add(pay_sign_key);

    boolean present_pay_callback = true && (isSetPay_callback());
    list.add(present_pay_callback);
    if (present_pay_callback)
      list.add(pay_callback);

    boolean present_coin_unit = true && (isSetCoin_unit());
    list.add(present_coin_unit);
    if (present_coin_unit)
      list.add(coin_unit);

    boolean present_coin_rate = true && (isSetCoin_rate());
    list.add(present_coin_rate);
    if (present_coin_rate)
      list.add(coin_rate);

    boolean present_ucode = true && (isSetUcode());
    list.add(present_ucode);
    if (present_ucode)
      list.add(ucode);

    boolean present_version = true && (isSetVersion());
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_package_url = true && (isSetPackage_url());
    list.add(present_package_url);
    if (present_package_url)
      list.add(package_url);

    boolean present_create_time = true && (isSetCreate_time());
    list.add(present_create_time);
    if (present_create_time)
      list.add(create_time);

    boolean present_update_time = true && (isSetUpdate_time());
    list.add(present_update_time);
    if (present_update_time)
      list.add(update_time);

    boolean present_create_by = true && (isSetCreate_by());
    list.add(present_create_by);
    if (present_create_by)
      list.add(create_by);

    boolean present_update_by = true && (isSetUpdate_by());
    list.add(present_update_by);
    if (present_update_by)
      list.add(update_by);

    boolean present_discount = true && (isSetDiscount());
    list.add(present_discount);
    if (present_discount)
      list.add(discount);

    boolean present_back_pay = true && (isSetBack_pay());
    list.add(present_back_pay);
    if (present_back_pay)
      list.add(back_pay);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeviceStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntity_id()).compareTo(other.isSetEntity_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntity_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entity_id, other.entity_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName_en()).compareTo(other.isSetName_en());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName_en()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name_en, other.name_en);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIcon()).compareTo(other.isSetIcon());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIcon()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.icon, other.icon);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOs()).compareTo(other.isSetOs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.os, other.os);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommon_sign_key()).compareTo(other.isSetCommon_sign_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommon_sign_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.common_sign_key, other.common_sign_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfirm_sign_key()).compareTo(other.isSetConfirm_sign_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfirm_sign_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confirm_sign_key, other.confirm_sign_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPay_sign_key()).compareTo(other.isSetPay_sign_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPay_sign_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pay_sign_key, other.pay_sign_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPay_callback()).compareTo(other.isSetPay_callback());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPay_callback()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pay_callback, other.pay_callback);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoin_unit()).compareTo(other.isSetCoin_unit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoin_unit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coin_unit, other.coin_unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCoin_rate()).compareTo(other.isSetCoin_rate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoin_rate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.coin_rate, other.coin_rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUcode()).compareTo(other.isSetUcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUcode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ucode, other.ucode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPackage_url()).compareTo(other.isSetPackage_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackage_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.package_url, other.package_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_time()).compareTo(other.isSetCreate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_time, other.create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_time()).compareTo(other.isSetUpdate_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_time, other.update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreate_by()).compareTo(other.isSetCreate_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreate_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.create_by, other.create_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdate_by()).compareTo(other.isSetUpdate_by());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdate_by()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update_by, other.update_by);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiscount()).compareTo(other.isSetDiscount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiscount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.discount, other.discount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBack_pay()).compareTo(other.isSetBack_pay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBack_pay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.back_pay, other.back_pay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeviceStruct(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetEntity_id()) {
      if (!first) sb.append(", ");
      sb.append("entity_id:");
      if (this.entity_id == null) {
        sb.append("null");
      } else {
        sb.append(this.entity_id);
      }
      first = false;
    }
    if (isSetName()) {
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetName_en()) {
      if (!first) sb.append(", ");
      sb.append("name_en:");
      if (this.name_en == null) {
        sb.append("null");
      } else {
        sb.append(this.name_en);
      }
      first = false;
    }
    if (isSetIcon()) {
      if (!first) sb.append(", ");
      sb.append("icon:");
      if (this.icon == null) {
        sb.append("null");
      } else {
        sb.append(this.icon);
      }
      first = false;
    }
    if (isSetDesc()) {
      if (!first) sb.append(", ");
      sb.append("desc:");
      if (this.desc == null) {
        sb.append("null");
      } else {
        sb.append(this.desc);
      }
      first = false;
    }
    if (isSetCategory()) {
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
    }
    if (isSetRank()) {
      if (!first) sb.append(", ");
      sb.append("rank:");
      if (this.rank == null) {
        sb.append("null");
      } else {
        sb.append(this.rank);
      }
      first = false;
    }
    if (isSetOs()) {
      if (!first) sb.append(", ");
      sb.append("os:");
      if (this.os == null) {
        sb.append("null");
      } else {
        sb.append(this.os);
      }
      first = false;
    }
    if (isSetCommon_sign_key()) {
      if (!first) sb.append(", ");
      sb.append("common_sign_key:");
      if (this.common_sign_key == null) {
        sb.append("null");
      } else {
        sb.append(this.common_sign_key);
      }
      first = false;
    }
    if (isSetConfirm_sign_key()) {
      if (!first) sb.append(", ");
      sb.append("confirm_sign_key:");
      if (this.confirm_sign_key == null) {
        sb.append("null");
      } else {
        sb.append(this.confirm_sign_key);
      }
      first = false;
    }
    if (isSetPay_sign_key()) {
      if (!first) sb.append(", ");
      sb.append("pay_sign_key:");
      if (this.pay_sign_key == null) {
        sb.append("null");
      } else {
        sb.append(this.pay_sign_key);
      }
      first = false;
    }
    if (isSetPay_callback()) {
      if (!first) sb.append(", ");
      sb.append("pay_callback:");
      if (this.pay_callback == null) {
        sb.append("null");
      } else {
        sb.append(this.pay_callback);
      }
      first = false;
    }
    if (isSetCoin_unit()) {
      if (!first) sb.append(", ");
      sb.append("coin_unit:");
      if (this.coin_unit == null) {
        sb.append("null");
      } else {
        sb.append(this.coin_unit);
      }
      first = false;
    }
    if (isSetCoin_rate()) {
      if (!first) sb.append(", ");
      sb.append("coin_rate:");
      if (this.coin_rate == null) {
        sb.append("null");
      } else {
        sb.append(this.coin_rate);
      }
      first = false;
    }
    if (isSetUcode()) {
      if (!first) sb.append(", ");
      sb.append("ucode:");
      if (this.ucode == null) {
        sb.append("null");
      } else {
        sb.append(this.ucode);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
    }
    if (isSetPackage_url()) {
      if (!first) sb.append(", ");
      sb.append("package_url:");
      if (this.package_url == null) {
        sb.append("null");
      } else {
        sb.append(this.package_url);
      }
      first = false;
    }
    if (isSetCreate_time()) {
      if (!first) sb.append(", ");
      sb.append("create_time:");
      if (this.create_time == null) {
        sb.append("null");
      } else {
        sb.append(this.create_time);
      }
      first = false;
    }
    if (isSetUpdate_time()) {
      if (!first) sb.append(", ");
      sb.append("update_time:");
      if (this.update_time == null) {
        sb.append("null");
      } else {
        sb.append(this.update_time);
      }
      first = false;
    }
    if (isSetCreate_by()) {
      if (!first) sb.append(", ");
      sb.append("create_by:");
      if (this.create_by == null) {
        sb.append("null");
      } else {
        sb.append(this.create_by);
      }
      first = false;
    }
    if (isSetUpdate_by()) {
      if (!first) sb.append(", ");
      sb.append("update_by:");
      if (this.update_by == null) {
        sb.append("null");
      } else {
        sb.append(this.update_by);
      }
      first = false;
    }
    if (isSetDiscount()) {
      if (!first) sb.append(", ");
      sb.append("discount:");
      if (this.discount == null) {
        sb.append("null");
      } else {
        sb.append(this.discount);
      }
      first = false;
    }
    if (isSetBack_pay()) {
      if (!first) sb.append(", ");
      sb.append("back_pay:");
      if (this.back_pay == null) {
        sb.append("null");
      } else {
        sb.append(this.back_pay);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  // check for args
  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private static class DeviceStructStandardSchemeFactory implements SchemeFactory {
    public DeviceStructStandardScheme getScheme() {
      return new DeviceStructStandardScheme();
    }
  }

  private static class DeviceStructStandardScheme extends StandardScheme<DeviceStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENTITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.entity_id = iprot.readI32();
              struct.setEntity_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME_EN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name_en = iprot.readString();
              struct.setName_enIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ICON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.icon = iprot.readString();
              struct.setIconIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rank = iprot.readString();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.os = iprot.readI32();
              struct.setOsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMMON_SIGN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.common_sign_key = iprot.readString();
              struct.setCommon_sign_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONFIRM_SIGN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.confirm_sign_key = iprot.readString();
              struct.setConfirm_sign_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PAY_SIGN_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pay_sign_key = iprot.readString();
              struct.setPay_sign_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // PAY_CALLBACK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pay_callback = iprot.readString();
              struct.setPay_callbackIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // COIN_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.coin_unit = iprot.readString();
              struct.setCoin_unitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.coin_rate = iprot.readI32();
              struct.setCoin_rateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UCODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ucode = iprot.readI32();
              struct.setUcodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.version = iprot.readString();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PACKAGE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.package_url = iprot.readString();
              struct.setPackage_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.create_time = iprot.readI32();
              struct.setCreate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.update_time = iprot.readI32();
              struct.setUpdate_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.create_by = iprot.readString();
              struct.setCreate_byIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // UPDATE_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.update_by = iprot.readString();
              struct.setUpdate_byIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DISCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.discount = iprot.readDouble();
              struct.setDiscountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // BACK_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.back_pay = iprot.readDouble();
              struct.setBack_payIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEntity_id()) {
        oprot.writeFieldBegin(ENTITY_ID_FIELD_DESC);
        oprot.writeI32(struct.entity_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetName()) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.isSetName_en()) {
        oprot.writeFieldBegin(NAME_EN_FIELD_DESC);
        oprot.writeString(struct.name_en);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIcon()) {
        oprot.writeFieldBegin(ICON_FIELD_DESC);
        oprot.writeString(struct.icon);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDesc()) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCategory()) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRank()) {
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeString(struct.rank);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOs()) {
        oprot.writeFieldBegin(OS_FIELD_DESC);
        oprot.writeI32(struct.os);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommon_sign_key()) {
        oprot.writeFieldBegin(COMMON_SIGN_KEY_FIELD_DESC);
        oprot.writeString(struct.common_sign_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetConfirm_sign_key()) {
        oprot.writeFieldBegin(CONFIRM_SIGN_KEY_FIELD_DESC);
        oprot.writeString(struct.confirm_sign_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPay_sign_key()) {
        oprot.writeFieldBegin(PAY_SIGN_KEY_FIELD_DESC);
        oprot.writeString(struct.pay_sign_key);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPay_callback()) {
        oprot.writeFieldBegin(PAY_CALLBACK_FIELD_DESC);
        oprot.writeString(struct.pay_callback);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoin_unit()) {
        oprot.writeFieldBegin(COIN_UNIT_FIELD_DESC);
        oprot.writeString(struct.coin_unit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCoin_rate()) {
        oprot.writeFieldBegin(COIN_RATE_FIELD_DESC);
        oprot.writeI32(struct.coin_rate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUcode()) {
        oprot.writeFieldBegin(UCODE_FIELD_DESC);
        oprot.writeI32(struct.ucode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeString(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPackage_url()) {
        oprot.writeFieldBegin(PACKAGE_URL_FIELD_DESC);
        oprot.writeString(struct.package_url);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreate_time()) {
        oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
        oprot.writeI32(struct.create_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdate_time()) {
        oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
        oprot.writeI32(struct.update_time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreate_by()) {
        oprot.writeFieldBegin(CREATE_BY_FIELD_DESC);
        oprot.writeString(struct.create_by);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdate_by()) {
        oprot.writeFieldBegin(UPDATE_BY_FIELD_DESC);
        oprot.writeString(struct.update_by);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDiscount()) {
        oprot.writeFieldBegin(DISCOUNT_FIELD_DESC);
        oprot.writeDouble(struct.discount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBack_pay()) {
        oprot.writeFieldBegin(BACK_PAY_FIELD_DESC);
        oprot.writeDouble(struct.back_pay);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStatus()) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

}

